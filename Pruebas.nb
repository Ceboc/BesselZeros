(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    539454,      10210]
NotebookOptionsPosition[    536730,      10155]
NotebookOutlinePosition[    537168,      10172]
CellTagsIndexPosition[    537125,      10169]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["(dZ/dz)^2 = (1 - z^2)/(Z*z^2)", "WolframAlphaLong",
 CellChangeTimes->{{3.8075628228214245`*^9, 3.807562876285254*^9}, {
  3.807562974283656*^9, 3.8075629834360685`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"1d3b39a3-7dc9-4333-9f23-5712f94236f2"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "(dZ/dz)^2 = (1 - z^2)/(Z*z^2)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Z[z], z]^2 == (1 - z^2)/(Z[z] z^2)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  FractionBox[
                   RowBox[{"\[PartialD]", 
                    RowBox[{"Z", "(", "z", ")"}]}], 
                   RowBox[{"\[PartialD]", "z"}], MultilineFunction -> None], 
                  ")"}], "2"], "\[LongEqual]", 
               TagBox[
                FractionBox[
                 RowBox[{"1", "-", 
                   SuperscriptBox["z", "2"]}], 
                 RowBox[{
                   RowBox[{"Z", "(", "z", ")"}], " ", 
                   SuperscriptBox["z", "2"]}]], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"first\[Hyphen]order nonlinear ordinary differential equation\"",
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["z", "2"], " ", 
                RowBox[{"Z", "(", "z", ")"}], " ", 
                SuperscriptBox[
                 RowBox[{
                   SuperscriptBox["Z", "\[Prime]", MultilineFunction -> None],
                    "(", "z", ")"}], "2"]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"1", "-", 
                 SuperscriptBox["z", "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[Z'[z]^2 == (1 - z^2)/(z^2 Z[z])]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox[
               RowBox[{
                 SuperscriptBox["Z", "\[Prime]", MultilineFunction -> None], 
                 "(", "z", ")"}], "2"], "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"z", "-", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"z", "+", "1"}], ")"}]}], 
                  RowBox[{
                    SuperscriptBox["z", "2"], " ", 
                    RowBox[{"Z", "(", "z", ")"}]}]]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FullSimplify[Z'[z]^2 == (1 - z^2)/(z^2 Z[z])]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                FractionBox[
                 RowBox[{"1", "-", 
                   FractionBox["1", 
                    SuperscriptBox["z", "2"]]}], 
                 RowBox[{"Z", "(", "z", ")"}]], "+", 
                SuperscriptBox[
                 RowBox[{
                   SuperscriptBox["Z", "\[Prime]", MultilineFunction -> None],
                    "(", "z", ")"}], "2"]}], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[Z'[z]^2 == (1 - z^2)/(z^2 Z[z])]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox[
               RowBox[{
                 SuperscriptBox["Z", "\[Prime]", MultilineFunction -> None], 
                 "(", "z", ")"}], "2"], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox["1", 
                  RowBox[{
                    SuperscriptBox["z", "2"], " ", 
                    RowBox[{"Z", "(", "z", ")"}]}]], "-", 
                 FractionBox["1", 
                  RowBox[{"Z", "(", "z", ")"}]]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Slope field", "scanner" -> "ODE", "id" -> "SlopeField",
      "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "VectorPlot[{1, -(Sqrt[1 - z^2]/(z Sqrt[Z]))}, {z, 0, 6}, {Z, 0, 6}, \
VectorStyle -> \"Segment\"]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}}, {{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6]], {
                 
                 LineBox[{{0.3049077340369136, 0.46961633895073235`}, {
                  0.3606556076306598, 0.19572750669233435`}}], 
                 
                 LineBox[{{0.29412340901478834`, 0.7996430200808013}, {
                  0.3714399326527851, 0.531044671205332}}], 
                 
                 LineBox[{{0.28631569598619433`, 1.129817295932935}, {
                  0.37924764568137903`, 0.8662142409962652}}], 
                 
                 LineBox[{{0.2800894405036795, 1.460125932638379}, {
                  0.3854739011638939, 1.2012494499338877`}}], 
                 
                 LineBox[{{0.2748897185997707, 1.7905573001245818`}, {
                  0.39067362306780273`, 1.5361619280907517`}}], 
                 LineBox[{{0.2704252260400552, 2.1211011305729377`}, {
                  0.39513811562751816`, 1.8709619432854625`}}], 
                 
                 LineBox[{{0.26651937497648126`, 2.4517483199003642`}, {
                  0.3990439666910921, 2.2056585996011027`}}], 
                 
                 LineBox[{{0.26305510511971886`, 2.7824907634916407`}, {
                  0.40250823654785456`, 2.5402600016528925`}}], 
                 
                 LineBox[{{0.2599499270913192, 3.1133212194108846`}, {
                  0.40561341457625416`, 2.8747733913767157`}}], 
                 
                 LineBox[{{0.25714307387797974`, 3.4442331938197683`}, {
                  0.4084202677895936, 3.2092052626108987`}}], 
                 
                 LineBox[{{0.2545882466721295, 3.7752208444638913`}, {
                  0.4109750949954438, 3.5435614576098424`}}], 
                 
                 LineBox[{{0.2522492254513269, 4.106278898953894}, {
                  0.4133141162162464, 3.8778472487629063`}}], 
                 
                 LineBox[{{0.2500970655495335, 4.437402585233655}, {
                  0.4154662761180399, 4.212067408126213}}], 
                 
                 LineBox[{{0.24810822789298187`, 4.768587572144242}, {
                  0.41745511377459155`, 4.546226266858691}}], 
                 
                 LineBox[{{0.24626328687757043`, 5.099829918395757}, {
                  0.419300054790003, 4.880327766250244}}], 
                 
                 LineBox[{{0.24454601059627, 5.431126028576614}, {
                  0.4210173310713034, 5.214375501712453}}], 
                 
                 LineBox[{{0.2429426895052641, 5.7624726150812995`}, {
                  0.4226206521623092, 5.5483727608508335`}}], 
                 
                 LineBox[{{0.24144163579342054`, 6.093866665037993}, {
                  0.42412170587415277`, 5.882322556537208}}], 
                 
                 LineBox[{{0.5742233066272072, 0.10577205425039256`}, {
                  0.7569033767079395, -0.10577205425039256`}}], 
                 
                 LineBox[{{0.6016414067663591, 0.4569486933782557}, {
                  0.7294852765687877, 0.20839515226481098`}}], 
                 
                 LineBox[{{0.5833553310640653, 0.7783596518567854}, {
                  0.7477713522710815, 0.552328039429348}}], 
                 LineBox[{{0.572600738637579, 1.1023646251876662`}, {
                  0.7585259446975677, 0.893666911741534}}], 
                 
                 LineBox[{{0.5653553696419704, 1.4280996607972734`}, {
                  0.7657713136931763, 1.2332757217749934`}}], 
                 
                 LineBox[{{0.5601004934036165, 1.755056490268073}, {
                  0.7710261899315302, 1.5716627379472605`}}], 
                 
                 LineBox[{{0.5561002545311917, 2.0829139978525433`}, {
                  0.775026428803955, 1.9091490760058571`}}], 
                 
                 LineBox[{{0.5529471273478124, 2.4114580229711926`}, {
                  0.7781795559873343, 2.2459488965302743`}}], 
                 
                 LineBox[{{0.5503949084630577, 2.7405395250531925`}, {
                  0.7807317748720889, 2.582211240091341}}], 
                 
                 LineBox[{{0.5482852768510544, 3.0700511538122566`}, {
                  0.7828414064840924, 2.918043456975344}}], 
                 
                 LineBox[{{0.5465114696203673, 3.3999133620211173`}, {
                  0.7846152137147793, 3.2535250944095497`}}], 
                 
                 LineBox[{{0.544998729174076, 3.730065783514271}, {
                  0.7861279541610706, 3.588716518559463}}], 
                 
                 LineBox[{{0.5436930760188781, 4.060461668962684}, {
                  0.7874336073162687, 3.9236644787541164`}}], 
                 
                 LineBox[{{0.5425545227606406, 4.391064175271596}, {
                  0.7885721605745061, 4.258405818088271}}], 
                 
                 LineBox[{{0.5415527967024637, 4.721843820412201}, {
                  0.789573886632683, 4.592970018590732}}], 
                 
                 LineBox[{{0.540664547418293, 5.0527766944122}, {
                  0.7904621359168538, 4.9273809902338}}], 
                 
                 LineBox[{{0.5398714685411513, 5.383843174587072}, {
                  0.7912552147939953, 5.261658355701996}}], 
                 
                 LineBox[{{0.5391590015116783, 5.715026985221182}, {
                  0.7919676818234683, 5.595818390710953}}], 
                 
                 LineBox[{{0.5385154206365587, 6.046314497623804}, {
                  0.7926112626985881, 5.929874723951397}}], 
                 
                 LineBox[{{0.8712970914703453, 0.05821988683620358}, {
                  1.1253929335323747`, -0.05821988683620358}}], 
                 
                 LineBox[{{0.8592844299113599, 0.346560185176956}, {
                  1.13740559509136, 0.31878366046611073`}}], 
                 
                 LineBox[{{0.8589398154800709, 0.6751886668694203}, {
                  1.137750209522649, 0.6554990244167131}}], 
                 
                 LineBox[{{0.8588243734063365, 1.0060606878575773`}, {
                  1.1378656515963834`, 0.9899708490716228}}], 
                 
                 LineBox[{{0.8587665447175991, 1.3376576835860512`}, {
                  1.137923480285121, 1.3237176989862156`}}], 
                 
                 LineBox[{{0.8587318129700452, 1.6695953160050123`}, {
                  1.1379582120326748`, 1.6571239122103212`}}], 
                 
                 LineBox[{{0.8587086440624807, 2.001724872570533}, {
                  1.1379813809402393`, 1.9903382012878672`}}], 
                 
                 LineBox[{{0.8586920877789512, 2.333975089290118}, {
                  1.1379979372237687`, 2.3234318302113484`}}], 
                 
                 LineBox[{{0.8586796667008609, 2.666306979063296}, {
                  1.138010358301859, 2.656443786081238}}], 
                 
                 LineBox[{{0.8586700035706569, 2.9986971808471123`}, {
                  1.138020021432063, 2.989397429940488}}], 
                 
                 LineBox[{{0.8586622716222155, 3.3311307315886847`}, {
                  1.1380277533805043`, 3.322307724841983}}], 
                 
                 LineBox[{{0.8586559445274168, 3.663597544990642}, {
                  1.138034080475303, 3.6551847570830915`}}], 
                 
                 LineBox[{{0.8586506712915903, 3.9960905414860473`}, {
                  1.1380393537111295`, 3.988035606230753}}], 
                 
                 LineBox[{{0.8586462088563385, 4.328604586021583}, {
                  1.1380438161463815`, 4.320865407338285}}], 
                 
                 LineBox[{{0.8586423835714448, 4.661135851197507}, {
                  1.138047641431275, 4.653677987805428}}], 
                 
                 LineBox[{{0.8586390680703425, 4.993681418090527}, {
                  1.1380509569323776`, 4.986476266555474}}], 
                 
                 LineBox[{{0.8586361668132302, 5.326239016570911}, {
                  1.13805385818949, 5.319262513718155}}], 
                 LineBox[{{0.8586336067303744, 5.658806850937658}, {
                  1.1380564182723456`, 5.652038524994475}}], 
                 
                 LineBox[{{0.8586313309830165, 5.991383479607447}, {
                  1.1380586940197035`, 5.984805741967754}}], 
                 
                 LineBox[{{1.1914130018168032`, 0.0032888688198468856`}, {
                  1.4708403648534905`, -0.0032888688198468856`}}]}}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    Nearest[CompressedData["
1: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
                    "] -> CompressedData["
1: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
WtKMs5Nfmv9/blxtfg==
                    "]]]][#/{5.990070075008159, 5.9880946107876}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, DisplayFunction -> Identity, 
              AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Frame -> True, FrameLabel -> {
                FormBox["z", TraditionalForm], 
                FormBox["Z", TraditionalForm]}, FrameStyle -> Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Automatic, ImageSize -> 250, 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "TransparentPolygonMesh" -> True}, 
              PlotRange -> {{0., 5.990070075008159}, {0., 5.9880946107876}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer points", "input" -> "SlopeField__Fewer points"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More points", "input" -> "SlopeField__More points"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Slope field", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Vector field", "input" -> 
           "SlopeField__Vector field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Slope field", "input" -> "SlopeField__Slope field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Direction field", "input" -> 
           "SlopeField__Direction field"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of sample individual solution", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolution", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
x14T/w9TdL63
                    "]]}, Annotation[#, "Charting`Private`Tag$1480960#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwt0Qk01VvUAPCLDE/IVDwiMpXQNVxk+p+nJLq4uDdDPaSQjE2UKENXJIko
Q3pleEkpw/OE3HNMGaNnCJEyk+lvysz3/7717bXO2uu3ztl7rX22rKufjRs7
iURqJs7/5u3/i1mM9P8RV/yOLE7CsYJVh4AmjVDW6mbEWTLhASG/wDcfE1lv
eoITThB+MGFEksnJYImZpVa7EJa9LxsQF/iG9Yrat3idMO+RYVGnhiJW67Cx
YjzhLUerl+VjpazEjpDoSsI9jQptFoPVLCFVm/Iewpq9x5TO/lPH6pM8OT1H
eONBUUsGamJJs3Kt97PhmON5Q6ELem2ss7KyeyMIqzevbjbz9LGu6kpYpRH2
fMEXEVfUz6JO6IQXEf4bs66JLP3B4pIYGB8iXCjQLlOaNMQqq/5Zcowdxy4O
rhlFsSZYO1N6z3Bx4Ji+bk3KSvsCyyZUOkGa8Pr0W5d9NYssc57IOm3CnyJm
VVtLllg8G1UaHoR7u/+K/vBqmdVza5G3nvD14eFTwSXrrDob7aroHTg2jYld
3avLDjkNdKn8XDiW7C20tk+AD5IFBSMVCMtvBdzXK+GD4wl8yJBwWuvt81ln
+eGH7CtavoQDcz/rOJQJQAn+NelWwotokBFYIQi7jo6vPeTGsfM24doRaSJw
wdGiRfQ3HHPwCa6WqvsdiofbDO3lw7End6P0pHrk4OfzDooUwo6yNWufReXh
gBDT04JwWabDBUSTh+3N5ngI4b63AkbWDfJQsi1uu59wUwzXNc0KBVh3k6Tw
gp/4v0QnJfhOCfLY345R2IVjXKneTaWsQ7AwfWedmjCOBdl2dp4z1ICGpP2r
xuJEv62qIUVxA6j/M83yNGHSAyE2V2MDGPJFL+sK4dvH5R0LvQ1gXMmYVRbh
S65SSQmVBlAlZzOH83ccq78vyEnzNoRJ2RKu9YQVlu+HF9caQS+5vbiFJI7J
SOjS8GoARaoZNx2kccyieIg5kHkURr26YHVZHsduXI8VoXSYwXiq/mIuGceO
bK3LJIzawqWXs77VhG+bFO2+t2QL3wU0TPQSvvT1RxtzBx0u+k1/51PHMcOn
XzOi9tOhSv+vT76Ej6n+vFXuRIfC/IIFGho49n1Dl9rZRYewzelRmSaONbbW
HmxvZsDBhcj6Rm0cu+Pne6ex0g5eTG5YmjLAMSebi2Env5yGTk5OrrpmOEZV
O/FKhuYKs7ut/p08i2NeeZ5X9mHecPuedQKXK44FUyfCc829obF1qK8s4bGt
ZBWdU96wS9JNyY7w3YVqC4aPN0wqPZlWRbggbKwyK80bOqTGxqScI/Zt53L8
4Yo3/I9nPNbUDccS2eY9kot8INlFXCLrAo7N+PucdFXzg2Zvfayd/XCsJHLX
3FHJSxAPO3CsPxjHmku/MDxMr8K2AsvgrSc4xjH4vjdP6SbU1pOwbWzBsdPN
rvQNLya0zTUWHSZcY+0qMuPHhA/CEzs3Ce9QEhb5cYUJ3X3+sVdvJeYzvNZR
c5MJ2/RGXJIJ+4X+dIqPYcJLijtvuH8m9pn4NE77NRO+bvWqZ2/DMW7bSycK
fjJh69jTIf1OHFN10DzlcTES9kRm8OX34pilrcrLz953Yf/oefLzcRyr8G4F
fiHR8FZ28Mpf7HNYQ7PqmVfNsfDclSDnfTpz2MsSNrbA2EdQ4AUmxfd8DrtZ
6pzxeiId6tV1mq+KzmOKY9zaqb7Z0Mp64dQh5jw2q+h3PVHvDcwQvVFhzr6A
yfHuV31HLoQyv73PGQ9dwJ4el/9BSvwXlh+XvJi4toAd2831GrKXw+34SNXn
4YsYF/uhuEwxBM0Y9fBfziXsYnK372ZeFVwpHk0yubeEbTx2eVLjUgvZJqoc
RqV/YQ4/fCU5QuphnchO2TNvf2HpXC3iJx42wdQOG6qH1TLWvZBfGr+nFdJP
zTkGLixjBQ1JTWbO/8E/wwsVFBJWMP8b4dLRyu1wNowS2XNsFXPSlZqYpXTC
ZRsOSeP5VSzxGb3htXYXdP92J62/eA1b0xCQ0AjpgXbUxHbTW+tYZ6a/K6mz
F55e8Qoz/mMD2100NCIu3Q+VB3wd+KU3sVy3s4X3HH/ALdWNqrdLm9h0vZPc
QPoAlOJtz/m7bQtbEQ6bPjo+CHXLK72nP21jFQ4tL3SdhqG4KQcSciUBz6Cl
D2caR2DfKFXUZ4YEut9dFbF0H4P9i3fce26zgei41gOi/BOwtNzKeUKAHURT
/ossyPkJuUN6fEYL2YH/XedxzptTcG5USnoXgwMwrJoW/zCegdaf+X/Yb3IA
zeRxT11eHH7sbhz0gTtAbn63vaTIHFSZNi93DuUEgRxJ7Iw98xD/vh474MwF
xjddbJ4bLsAqFaWo+xg3qDZ9vr7gvAgXRxYXApR5wLX9ppyRMUtw9cHh7a8G
vwGTgCzL1sFfsLiCeueJNS84EtX367D2CjQOej+6+ngnADTn7oUPq/B877Fn
LQt8oDNnT3LSqXVocXNz2chOALi7HhiqndmAgy3blue2dgHe572xtxu2IA0X
0dfuEQS1KqLz12xJaMVoZpZWKwSOPR7tarBiQxEZRg1Dg8KgKWrcf98NdpSy
40GSgIAo2H/8XrVODgea1wtjp4TsBp+n7rmkCXEiO7Wi0hsSYoDmprI4ksaF
xsVKHgp9EQfsKZaKHNo8yP6lZWEGlyTQ5vDQ2HeIF7V/cxlK9ZcCRxSV7UQB
HyowkPmeYC4DApr6Tt/oFUAttMlWJfX9wKxLQscMF0SmB7ocTS7Ig8LdQTHj
z4RRMHuaXH6oEsiSKZOc+SqKFp8alM07HQLhoXdrqbfE0NuSxiwlGhnEUTI9
3fskkIByLVdlshZw9Pztqcn8PtQalQoTTPRBiIIPyz1RDkW81yxcNtUHLqlD
OhlJcmiFZCP4p7k+2Izt6P/2WA45KsXtOmilD4zf2BQzUuTQGLuS1Ed7fXDk
+wrT9JkcOppUFyvqrQ90ZoqhZo4csi795wHHI32grnVkSO2DHBpVvxpKHtQH
WteSzxQOy6GZhdPD60wD0BnsmMumK4/2yfJcVR0xBPzDCdBrXB79ivBv/hgN
wMlyxOwIUETzfdN5JHYTMKv+sEU6URmVPXM5/3qHCZiaFTgZ9FgZJQ4o1J/i
NgFb6vzHvyQroxWD/OR3fCYg4sHB93Hpysh+ktPNU8wEWCDzeJ6XxH2A+sim
igmwfR+oJ1ymjFo7gp3e2JuA8v/iwiN/KCNHA6UwtUIToG3yOH1D7RBy4srP
M/M9Djx0v8YFtB1CZptp2UG7TgDlJRWvaG1VpFlxrzVSkQq87/T65Zwgo4ys
pce0Q1Qw3RcwFW9ORjGzEduSZCp4vjg3f5NKRgIZziUlR6jgI+vyM2saGYlu
M3vYLaiAlyoQwGFPRmrbnNnjV6jgz6KDp8M8yMgZup1bqaICWv7EX2ORZNRp
Otrh6G4BnmFHTX3qyKil9Al9oNoSCNNSf/9mpY6CC8tzZJdo4LJVfPp8uAaa
FMo6mbZCAzGYFymWqYFY8udP79mggR0vxE0ORGmgsoyZGkEOa/A+WTjgbKwG
0sKmuvcIWQOtcCaz/4kGCqqfbL6gag08vK+3ceRpoH7PCCtlD2vQJbl3ZKtL
A2n88+21w3dr8L3r77kOsibi8ZEzNR22Ac9gfOPWjCb6Y/Vg8JNxGzBkMzkg
Oa+JZs7UvpqYsgFjF74p6i1pIp88+cVHS8R7CQ2DoHVN1CxV4EXitgWh3/a+
5OHRQg0R4ZJ6yrag6pO6jLOsFmoPU/fVu2wLdo7w/7FC10Ju6eODVTx04LHz
/n0epIU2b6WXP+Wng5TvB9UCq7UQaUVt5rowHRR4qpLHPmqhCVDpobuXDgIm
UuybPmkh7uyFvvbDdNAmvGaT1auFhPUz7W7Z0YHx6KOmlGUtZDsVqPw2hw7k
32U2ppApKF47N/9LHh3MdlMZ2loUlHu0p5GtiA5K2fKdO3QoyLRyqsq5gg6m
fTOXRTEK6hV7uKLXRgdN8bq0HAsKGtQKpvhv0MGuDz8jxL0oiOa1OFbFxgBP
r/0e/smXguQ5qZbi3Azw7dXWrjuXiXqHHqMmIQaQejHZv3SDgo6YZ0xYKzFA
TJaZ21QUBel3GlwrU2EAbT7Fzbz7FKTc5FOroMEA/iolKpceUlCcmdiHHYYM
cLj416mNJxSUfbnL/boxA1zPy7KtSaOgw9SK/hlTBpgN5pqK/YuCRpTnFS5Y
MMDkpKSsQyYFrae9MBq2YYCvlcMLCi8p6H8ANedX6Q==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1480960#2"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {93, Automatic}, 
                    FrameLabel -> {
                    FormBox["z", TraditionalForm], 
                    FormBox["Z", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{16, 5}, {16, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["z", TraditionalForm], 
                    FormBox["Z", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0}, {0.7853981633974483, 0}], 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{16, 5}, {16, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
b7FYFlNBQqMgkRqVUAuiRm1rdBwECSnlXgH16FqI2sjygC1MkHi3+G3foeBa
sAs/yC9QJ0ioDVZV2trXQr62zKnTpkLECapMZqFcLfimSz8UjRAmQlbkU7c8
qoGEzVfyQq4KE/SI631PMmvg8jLHxI9rwsTAHG+1GJr77RuOgkhhYs0ixDFn
1MC+F8xvDG8KE3ZqFUrv02pg5y2f2cspwsSdb6nrvFNqgO/GexXZF8KE9daI
h3m3aiCLcujy8oAwEfBgnw1XWA2cqUkxsNUVIZZYRM2EjtfAnstnUoxXihIU
r8+2qQL4fvv15oBmMWJq81crnYBqONh1Y+xkqxjR3acact+/GkqNa53M28WI
2M/BCUt+1dB9G2xV34sRfz92Xn17oRq2eC85Dn0SI05TqFf1zldDa3rMtPOI
GFH+UibTwLMa6i0XSrLZxQntp1NMmier4X2TvjKxT5wwuNyT2WRaDSYBfw99
bREnHi622wwoVMN0Y+irkJ8SBNttydiLXVWwJrLz8aEAaYIx8YXfSKYKgmdc
C5YvShNvZkaj70lXQYKLo1FhiDSx5mrJr1GpKvgurb5NIFyamJS8vStKsgqU
Us1+DMRKE8TOk8eaxaqgaMS0+fYjaaJ9YpCxW7AKthdPrfKgSBMKgl8z+Dmq
QJaSXkxdK0P861TztPz1Fqhy8jYa52SIv/uuHZCIeYvr/2zUa5cs8WBEUWCJ
UgmuuvzcMiBLOIn1GQd2VEJ2UX5yByFLuCwMpDHaKmHXPu1RdQNZ4lhk3a2Z
5kqo0LrgSzOSJTrzRc6N1FWCWXqf7e0jskQje0Pkp5JKmHnicFvuvCzx7lLu
ePHDStDb9sY2Mg+fq+40W+VVCT5i1JAPcnIE28gHNS7OShDameKqoyhPKP1T
ejCyswKYFwoszyrLE4GaCz9BpwKyWFy/pajKEyLuD5oSd1SArGznh3+b5ImE
tFcmxPYKYEma3tG6Q54wSMqSu6leAaqrypUjjOWJRZchYVG5CtClrYv39sTv
Ld2ihlZWwNrijbQ9pfKEhIJh0k1KOXCdrMr0slxHVCYX5Yk4lgP/fhvLDa/W
EymPBk3e+pWB3Nfj/bIl64mMLY4pH33LYNLJ/rRU2Xpi4VDRrj8+ZUAMdcaJ
Va8nXgqaeUh5lcEu1WoF6bb1xJJ68L8w1zIYPafKbTu8nrhObfxiZlMGb/PM
2VOENhA/RSq1aNplsNqhzsgtaAMRGyPHa7P0BhIOUaleVgpE9bUPJnIhbyCv
7cQSs60Cob/iTbZo0BuwOrbO8c5xBeKj/6vdvIFvYMqmYFe1swJRlRMh/tf3
DZwkNB0UfBSIL4XP7Rrc34DbVd6V228qEB76x3cfO/4GOnT/mDu1KBCvYV71
3s43cBQGVbfsVSSu/pDSE14ohdVXPKXkjBQJ3fe8LQxGKYQc/f5Y4KAiYRx1
2qWHVgq/3NcF/rVUJHyF54UTpkshwKro8NeTikR0Ntsc+0gpFLlnN09HKBLs
bdOcLL2l0F+6Hm/SisSoTiLv8qtSiNA2yw1qUSSe7vwC/S9LQWhFqFZmhyKR
N2ooXPa8FDSoQRG0HvTh3kzf/FKQCdfnKPiNvx8sGDj8qBR4mlmqL3AoEROe
hnZPE0qhjT+u8jW3EnGi4vl8aHwpNM9GXl/gVyLWq/R2W8SVQgW/19UIcSWi
YP3CpsXIUrD8uMnouaoSsbVZjkJcLgXp6bAWps1KxOhEbwnPpVIwawuUM9+m
ROwLEy7oDy6FjXbLlgu7lAhGfEDuhYBSCO7v1TDTUyKat5k+3u1XCl4vaBM5
e5WI9juCt9f4lsL3mqDLrMb4fXqhd/e5UkidvT3rcEiJOFjGqXXfqxT+BwU7
vWA=
                    "]]}, Annotation[#, "Charting`Private`Tag$1480988#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxd2Hc8V9//AHAj2hTKDplZ2VlNO5QIiRRJJbOMMsveFGUmsspIRuaH10X2
3uvt/bbfVEL2/p3398+ffzyeHufee+45r/s6rxcuczvdRxRkZGR9lGRkpN//
/yd/08i5ReJ1lVawobzIkhuMn7RzyamPrnKUsWX68ckHwucukXF++VzFJF+d
xHY8ELhCuZwjXHKq3BejXToaQ+CI3BSDaVNhlckRC8G88XDYu3szs4JYVmUk
rkf18m8kJD8pn2HSxKqO+LqctX/4Doaaebu1J2qrXCZsztXHR4HkiDK/WVFD
1bMaD2+m7mjYCS9s/4y1VL23pL++v/4eXm+F/JdI1llloyZD+EoVA3ctLp58
It9dddzYSPkWfSzQGc9WdYf2Vl1TCpeep46DpExigu1qf9Xjg4LutItxIN66
udt6CFcV4RL6U7MmAZ6mHPOJKMRXPeLVq3+UnQgZl2/99C8bq4r+eDFTwOUj
FND0cJa9n6yqzcriTjz6CVyva1ML001XNb59odnd9wn8P+qHCsXOVPV6EXao
bySD1cTWpcCquSrfyZ5ZNsoUkC1ou/TW9HcVp9IrpYx7KfB4ZZVC+OB81V3G
mRDR0hSI3aBnX5NdrLIYfNK4+vQzKMj+jNvoWa6SFTIRPJWfCtvz3x5w/Fyp
iqChZ/uzkwptPgsiHSWrVb5VBxrMVdNgZPBT0H9f16sqnRas7XBp8HJqysC9
ZLvq99Kdf3d20+GvZfSKYe1O1eOgyirsWga8lOFIdO7erQpXe+fGEpABLn2+
Wk+39quuJ8XWStFmwvxlRkc2WQpoYB7xdDr1BeQjg6/nNFPAhJbc+r/bX8Av
SUC6wpQShhv9B6ajvoDCqjrvzZADMOB1Yjb3xFfI/sUrO7dKDZQFOFwARRbE
Wp/c4qA5BlfXwn8d7MwGnj3nUPmSY7DOw8HnfjAHEjq8LNLMjsOKAhF7eikH
XLI6LxiV00DZoxT2/KwcWMEm9F0qT8A9N+3iRfdcsND1lvFJoIcS/6YXDqfy
wMvtqO7GJj30HHDf3FTNAx5tRk9KIwawCc4U4n2ZB9Oe86kDTKeg8t5+wsOh
PNg8R2d959NpoN+3sME0v4ORjXstewMziE4ykGtT5YPam1fVIaIs0EQ0vTjF
mg9PPX0I3h9YQPhPfNYdiXwwdNSTOfyEFbSo77EMmebDgbPXPe6fZIehyBkL
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
Ty3zZkpjupfZbToF6+H/AKBQ0NA=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1480988#2"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {93, Automatic}, 
                    FrameLabel -> {
                    FormBox["Z", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "Z", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{16, 5}, {16, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["Z", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "Z", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{16, 5}, {16, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.6236, 0.27, 0.3], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJw113k8Fd/7AHA7oazVx3rt7rWHawndUSFL2deE7JW1LFlS1izZkroSskWR
pBIf1TPaC5WKVEi0KdlpIX3P+fxev/ln5v065zVz5sxznueMrG+4QwAbCwtL
FisLCz7/3zHN+P8rIb0N/5kZIvSbsoYfeiZxz2nGqaOZG6Vey0NVBys7Ntfp
kK72W6qQ06TNiR3v2NfnZ6IN7vpnuLBVjC/nlhfqQijLZh7sy65JdM8/ehA6
q7YKW2cg9UuXkQFkX6XyYt8wkD7+9LAhbFxx4sceXLk9pvSPMYw2Z6zGfnhM
kNMuxASuZXWtwVb8cSzl2r1NwMFRKIQtI25gN32HgIfPhEWwlX75iDIOmkKX
+AVR7CM33HS5NTeDWJLEP9jbr42lv6/eAlJ3FsWweQ59Cx/dvRV2DY1LYEv+
bjlnLGcGK1/FZLAvUgRdx86bg/PryzTsuIO5IvSXlnAjmV31v/nZ5DL008gK
kg091f6bj41vTS1qrCBRTl4T+3xa7JbkGGtoHueh//c8sSx2N9ntoNmzdTP2
alWZ1mULO+DbLLgVe5PgQg7/ETswmh8zw3YKfXvPs80O9D1rLLGf7z/tfJNm
D3PWOfbYO1J8WGMFHMDbhM0P23BlSeb4J0e4o6jujx35ZuR5OocTvA/0CMA2
OfOmKlPOCe4sdwRhb1X/mtTh5QSH20tDsN8tG9j0vXKC2eynMdiPn96jveh2
BictsVzstPCwtMedrvDwUVHef/MvpnzuxHtX+MstVIC93+ygQCirG2xMFCnC
FrC1qNpm6gYNGQYl2C+sd6hc6HSDSEPOc9jJy829QvfcQfB+eye2l8PeZOv+
nSB/MvcOtup7rqwXP3aCpav/PWyq8RP5PWKeENQq/ghbM8ic5aanJ3xTaXj2
33hW33jO9cETTDl3jWAfcG3rll7YBa3EWjZWZKH4PfcrBH1AmcXLFttGY9t5
GTtfyOK5ZIfdJOPA7+DuC+ZzLA7YM6+bVtJ8fYEzss4Jmwl7C6aifIFl3V93
7Dg1nd2vSnzB1fK1P/YHQ5OUmTFfaIswSsCWTvomsiPOD6bKHlzAhkBi9HS9
P7A8y1jLhlyUe+aHjFgQGJY4rMcOEde9JywfBFH7KGLYfFWyXFzqQaCodkMS
e4uO5vtpIghmlNgUsGstghdfBQcBhzmpje2kkrvvW1sQTFtx22ObVQYoKXkE
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
P8wp1tHJ/wGCjY5H
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1481015#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {109, Automatic},
                     FrameLabel -> {
                    FormBox[
                    TemplateBox[{"\"Re\[ThinSpace]\"", "Z"}, "RowDefault"], 
                    TraditionalForm], 
                    FormBox[
                    TemplateBox[{"\"Im\[ThinSpace]\"", "Z"}, "RowDefault"], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{32, 5}, {20, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox[
                    RowBox[{"Re", "(", "Z", ")"}], TraditionalForm], 
                    FormBox[
                    RowBox[{"Im", "(", "Z", ")"}], TraditionalForm]}, 
                    AxesOrigin -> {1., 0}, AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{32, 5}, {20, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}, {
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
08tOA/8PI8zCsQ==
                    "]]}, Annotation[#, "Charting`Private`Tag$1481043#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1481043#2"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {93, Automatic}, 
                    FrameLabel -> {
                    FormBox["z", TraditionalForm], 
                    FormBox["Z", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{16, 5}, {16, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["z", TraditionalForm], 
                    FormBox["Z", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0}, {0.7853981633974483, 0}], 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{16, 5}, {16, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwl13c81d8bAHAZpZAVMgvJLKMSiecjlSJCtpJNJZRkZKSQjBANaRqVjKTs
vWVeo0hRSYkoXPdeKvk9n++vf3q9X8f9nM855znP83wknbzNXJmZmJh8WZiY
yP///28GOrXC3O4/tNThVVf9z8TmsYqx46U6nT+vriCdIKA5EWg/qJNesYKF
NC+7zpjU6i86sflqbKRL/bNv7PD4oWOz8+5K0pwe8RsG1s3onGbaw076mkm2
8vbHczq7/plzkh5y8NJ5bbugM1oQxUU670PRNbNvizpFV9vXkr7N4nVxOeSP
DitrEi9pU9rrfVU9/3SEQ0XXkzbq5vQKZWMB8Qa6MGld2vjt7j8scGx4QpT0
bxWFiJ0LrPBvUngj6XEOAWENllVg8e6FPOmpvqPlDEcOqAxnUSStpN0lmTHP
AeGaR5VIizkO3uuN5oRgKWll0hY3XjlVFXFBwQT7DtLGYzoRH3l4QLlz7x7S
ouGv/YlHfHBcm9mZ9JHy38o+R9ZDg8wWF9IcZ3U4JSPWw2c3W1fSL8P9DJmL
cPxvhTtpp13pPyyEhCGsLM2TtFbUe+E9I8IwF9N9nrRaSRFdxU8UzFWE4/+b
70PG7NEWCeBtLqsj3ZDqluf1Twqkb8Y3kG6bOpzTJyYNBlYuTaSnEzhGTbSk
waNY5DXphR9O9OQAafihkEMhfZXn7KPd89Kwh+3YJ9JmnPwaQjOboJgQYF6B
jpP23vBjcTPIMdkfJi27WNjLZqkIMezPTUj3BAo83OWhCPpUJjPSw7XHz/sF
KcLKM0/MSU/IaGgv3VeEFYLLNqR9v3WrWHxXBKuD71xI35Ozvrk5WAnKfLQu
kDY48jLR+OkWmLnX8ox0eUZdhs1qFVhBiRJgRn8YYAuj3lIDo+IRcRa0Isv6
pop9GjBodWojaee4k7dGzDTguf2iFOkvdrLzrA4a0HtPWI40sfLGoaNBGtA/
dVKNdOGmHf47nmuAhIypPulO9y0ZScKasLds61nS0idl+mZmNIGit7eD9M9C
T/X9z7RA7cOV66xoyedpabb6ACYtvzxXom+y2J8IuKEH+x7wnyG9Jjn9bec9
PeDU1fQjfefU35Uyj/Xg8ZerIaT92dsKBov1QKKAuEb6vH2DrMWgHtRXsxaQ
Zv3y+U666F6QCJiYJz3OOHEkIWMvqEdqRaxCP6ZR9fJL98G4wKsydjRP7Yo/
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
ig==
                    "]]}, Annotation[#, "Charting`Private`Tag$1481071#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
zFOY375DuA7+D6cQEgk=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1481071#2"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {93, Automatic}, 
                    FrameLabel -> {
                    FormBox["Z", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "Z", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{16, 5}, {16, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["Z", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "Z", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{16, 5}, {16, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.6236, 0.27, 0.3], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
cK5qJRVlLWQtuJpT0FDHlwXpKir6H+pDzjc=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1481098#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {109, Automatic},
                     FrameLabel -> {
                    FormBox[
                    TemplateBox[{"\"Re\[ThinSpace]\"", "Z"}, "RowDefault"], 
                    TraditionalForm], 
                    FormBox[
                    TemplateBox[{"\"Im\[ThinSpace]\"", "Z"}, "RowDefault"], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, 
                    ImagePadding -> {{32, 5}, {20, 5}}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox[
                    RowBox[{"Re", "(", "Z", ")"}], TraditionalForm], 
                    FormBox[
                    RowBox[{"Im", "(", "Z", ")"}], TraditionalForm]}, 
                    AxesOrigin -> {1., 0}, AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    ImagePadding -> {{32, 5}, {20, 5}}, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"Z", "(", "1", ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {None, 
                  RGBColor[
                  0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
                   None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
rs1dkthdYxP7y/8GwnGTCA==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043731#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043757#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1:eJwt0Hk01PsbB/AhVIpSipB9aZ3k50qWPl+kSGMZ9Cs1tltNMlGylMiWJlzF
L4SiVIy9Uhjr8yVari2jhnwnZEkyyBItLvfbOb/nnOc85/Xf836refrST4hS
KJRQcn9fjf2S6xmhBKL8f2ZzbFV++/PSu626QhVIdDR3/+3DKpV6bckGQOt+
s9qV9GMzGYX+ur3gfE3Hy410WORyfPCHHTi2cLM8SLtfkTJxP3oIaoRG08dJ
E2oRpd+YDLCKy0vxIi2vkr18KsYTPsdbNvqSPtCo8ZLIOwnOKsncINI3aZsf
qKzyhoczf+ZHkBYXSh2eK/UFV7uGt/Gkn1uWH02j+cEeJWm/O6TnbTJcVvT4
g6RBb3URaZMO1hL1uCBwllb8Wke69o9dgnbHYGCc/rLvPemu/LQZ6q5QaBFU
zU+TPhvFYOsphENVC0Vi3WUCSa+SOaLzMgISpjenGpG+fr4jxycyCuLlRCgn
SCu/96h6aBMN/mGFsUmkE5zyWnzU2eBsURT9mrThETzqokQM+Ej37hELI9Cv
eqd3F+ZigXlmXvMv0u3vW+PR4nVQKKRPvCcdqMPBGmITgJJXUEINJ5D2uJrM
4O1EMKHinuOksROsO4VtN+Efc++JIxEEyk3cztecSgKR2clnLaS9jOQpuxRS
wF0ubntbJIGaBIoW/OBUUDEWvHaMIlCmiHuta2YaBD/cx+kjXa0lZF99kQ6N
r47tkI0m0ItQkawQzQxIXcF0qyJ9XX/5I12XTAhLMCO8rxLo1oZFX7uku7Bk
IaN+hE2gmPmQqVbJLIj7Gfas/BqBnoY6Xz9anAXC78KFGzEEin3kNy/hdB+s
aGsL3OMIVGfv2ped/QAq/tdfH3ODQNF/fzoT6pEDhhuCxwoSCLQ3Us9IKMOB
LbzkVd2JBBIGntA2a+BAqnum4dEkAuVX9Ehep+aB8gG+1Pc0At3mle6lbSgE
p183BsNvk946Wx3dVQhap34UymUQqLmKWcZOK4KTsQ5SZ++R+Q7l/kGoPoKH
vWu7eRwC/SeVtUZf/QlsT9JXXMgjkPm+pPHoxCegu+y0jEkhgfQ/BpjxRUrg
L0UV+uRjApnyFkdPD5XAHva9EOsqso+qgYGd3GewlbGlbk0tgdq2LX7Yu6MU
yjh0uUmcQMyyeFkrTikE6l9QHH9B9jNowZRPLwPawkH7yQ4CFbdK/nwSywVP
42GC2kn+Y+Pon0WpAKZSHCe8m0C0CNPKQ0EVoNGS0+nxkUD25cX+UsxKUJqL
8lD9SqCV/y3yZ9tVQ4ekL1d8hkBXN4BSRFM1iGmljFO+k3nsdtEMrGqApi5f
uZsiQEUjTLNWi1pQEjEWVsgIUEzz8zev1HDoNxoXLV8vQA7vBg7InsJhx/SL
S22KAsRsfyP+qhgH9WUrTzlqC5CG5enNJ0zroKxCtrTQRICEzXod7m71IIwT
erT4CFAuRexYWWkD8NtYPwIDBOiI9gC/kdIIlX/TM0xDBOiF0O8U9WAjvBmt
ZKvHCpA5U2rLssFG8E9cv9aWI0CRhnPDTXIvIdKus8FsWIAicpzkl954DYYh
5XZzfh9Q5+XxYjlGK9zPvdLL39SD3H5ZuzYJ20HkTomt+EQPMt5pK1aW/hY2
mnpS/Zp6UXt+qGK1cyfEhbNm0r37EM9Be0PnqW7wy9ajcb71IX5Zl/1Hjw+g
2ecQ75L2EYX11DWoHuuDJcPq/Vus+pFR0uqcGel+qLBMr+PN9aMCn8sRy58O
wPP8drptwwDyYTxdfBA3BBeksgPuJAwiLPVP8SnnYdCc8Mb1Q4fQfJD52WmX
EYg028TmBHxCCTGMJu0zo7AuvNS3hjWMLPsyWRS/MUDUkmPhsZ9RUzhdbXPN
BLwbd+45yRlBzJfSrIyFr7DvrmiCRvsX1GVlejtCZwqqbbdVVG0Ronv8ysvc
S9Mw0aj06+6VMSTr3tVm2TwD6VOLNl/kJlCu8sX4SPtZOH7Uekja8yvC6+Rc
sz7PgVRB1yYpo0l0Ufndl5fhP8ClOCoh3nAKOTg97uEzfkE+nSs7bTyNaniy
lUHYP6AW/0B7wGEG5WkLe/TNF0Hl5jOMmfkNhTY3jIXwKLgM90xT3+wsmo87
EyoqJYpvj29hKad9R9ZiNTbN15bgfofqbbj0n+hTttUcLieOS4zWNN/eM4/K
cffajTwJ3L4w2GA6ZwF5i3Rt+/ZjGZ6YorvY/5CCndRPWch1XIFPGT2NTHYR
xdjUL481GdL4xtVjtAiWGGYn+jr63BIZ3GTW5asoIYEpv76kxNi0FjeW2HbV
kS6JcVj9Gmb66/Fz1I7uyx3SWKhqQVaZtgLetTSs1fbpGkxBdUTv3JAKftI+
wy15TB7TCBjb+tNNC+fcDzTYe1gDC7hf6/MpXxc/X7Ter8RAE0tnb98vytqJ
y571v7lzhxYWvmzdwTILPVykKIAnG62DqYV7BSUe0MfxK7dsz49TMWJl525r
rhE+2n98EUZ1serkqxX795jiWvzA3aMNepjnKP+Z824MV5AWS0l8YIjZL303
kG9niXsdS/k22WuKKSYHD8q/t8bXKSn5029ZYK9mTmcWz9jjIx47Iy6o2mE6
/3Rya6dc8PGhS57+HQwz3nQ9M+ytV92/H2IMDg==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043783#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
e4P/AYAL0lo=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043809#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
Z/wsEbku3dzaqmgRM9mww7HmX7dANfk=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043835#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
1Vzvfyrl7Rs=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043861#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1:eJwt0nk0ldsbB3BDhKTIkNCpZLpu5qTCfl3TFZlDigopyhUO4sYxJLOESMnQ
kanIQQ5Sz0uRqcitHJVUEvWaK8Wl329b6+619trr88de+3n299nq4W9/nIeL
iysa75VT3lxI0i2CQlz/raKXWlIr7su27I7LkARLGzvaioVO7xLpmVGHKT3P
nStudbWZUThkAJpn/jq6YiUHnYXQPDPwlo4uXXG1bV+cbr4NZGypEXXH1vcP
dVTqdoRYs60lK/YY6ul9t8sVDv6aP3UEOzQgd1U2/1FYX+blexRbJ5ZX3mKb
J0g+LC47hs1WsVF0O+0NtsOLOzyx7VKqKi598IHgllru49h1XgyJhRg/EA5S
UD2B3VShe3Hu5hmIt73D8sE2yNwgNnM9EA66NuWdxo5L0896UkYHua2NX/1X
+pv24JlvC4Eozp8SdOzltGmRmu1hMNEn03EWu2QnPfpuzt8wvPulRCT2A9lH
5+mbI8GY7zeB89hndfh7dx2Ogpz5l2VJ2L/esPbn1kSD3FAFdwb28N6xVhWx
WFh0MeNlYl9XCxyUmIgDP7FZuI3t2y/3Qto7Ht4eSTzMxpY+cT80bzwBKOZn
t17sxFu6Tqn8KaCgKTTwBpvOJ6zaWJQK4/90ulAr/cQL7nxrchEo2YiCNZEU
YtDMle3tLsGaaVEjWezYms09LbQMyBBZN7kD+2YyIyRyNgNKQisvOGKrTdzz
b8rPgg8FN+J8sO3KU84oh1+GHUmlLAb2/wqeirS4ZEOSo0jdHeyNg7QKB9oV
OGyokNeJXX9dIAStzgX7sfrnH7EdRR137J7LhbTfDQ7RGDgfq7VmBs+uQfAn
ovkmdhrPoMxoTQHwhAZ7d2EvnGi17HAqhCILw6sz2Gwhh9SoF4XQID7VYhSF
673T+XrdQBFMdwkL/8TOuB2wHPCFCZuaBpdUovF7eRnizMBi0PxdD9ywo9Qj
nZSWiiHoxaWhLuyYHMbYtg0lYJXUGdccg/87+tTeZtsyEFpcqOSNpZCUospd
znQZ1IpYO+zHVks7lBWSXg6SIxfMxrFVaO3WGi8rwPS1jKphHIX6OZRtUFAl
eOf15VzFflJ8WipwcxWMJzwYXcAmdxlojHVVgaBOoUvLBQqFadu+khKvhln3
Qb7gBAr9jChpXxvOgqfvnbk+YB/rT+Hs7mWBm6bWgF0ihZT3JhzgU6iB1GSG
6Z4kCt0yqNga1l8D8cMiLuopFNLeOXKjS6cO3n7PP1mHzZtiemU8rQ6s02Yq
9VNxffdZ3szPdfBkSWCVcxqFrLI+Bk8V3sX57pGrS6eQgnWfyT+SbJC1Nys8
dolC6cuclu4INuRKb3bckIHvv5GWDx9lg8tIX2JsJp5v5Jj4o74BeE8m9l/J
plA23xTtL48m4LfdoV98nUIWj4uey7y+D+7sqsM5+RSS2ZenamT5APpGD9Iv
FlCoXbW9Q6z5ATQo5bSlFVEopO6TY1MBgDKtI7f7JoUu2bjcT2aTkOgaEG95
h0LOR7UPLGa3wrvI+bnIapx/tJ2naV8raP2yj2ez8Lyo87W/EnwIfUEW7np1
FFJ096F/jHgI5DZtzfBGCrUxXb8F+jyC814XPwm2UejTjbPJYdbtoH7Vedxl
hELMyQmNdRVdwHVcf2yEfwK9l2KyrYR6QWq2b/6k5gQyltLlWPc+A+0jikNb
fCaQvuGZC2uCn4NK8PZbq0sn0J+Mtobv4gMgxenYNPd9AukG5jZQG1/BZdEf
N9xtJ5HVZdO1JXuH4J3F04UtrEm0qLluT77yO1B71M9KV55CX5gspR7qPdwo
1FyIKZlCtYf03ExKR8Az7Z4jiaZRRYy2p0nRKGx+0v1Ff3waxSHLRv3KMajh
93KwsJxBTuX1T0bufAaC/kGmo3YGmdTRw7ctUSAjECXnRZtFN/38rMSJKUjU
URfjz5xFoxHxz7mtZgCuC/K3ys6hNZwOEXbxLOiauTOGyufQcET1Sd/FOVAN
IQNH7b6iAZqyn2LcN0hNmlToX/0NzZ9zWRW2fR5Iv36TkNZv6GJLjxjXox+A
/Mx4HxZ9R5mHDN3ryxcAEqK/JSTMo+hNcplLWf/CKK+2eU/MD9SSOzdYW7AM
HVfTH+SxfqIzHI3ko/xcpIVo9bGsqQWkwF2vNmfKTU7H8UxuDPoXtdDenf37
MQ+pcu5y+dj6ZeTcsNF9w+FVJF2S+Oj+/hdSLFX115flJ1tdvtzuvsxF+EeW
/Fa7T4BcmJ6+O8zhJswMn9dNVwiR32mmAlcieYlfzo+Nv95bS7aVu77WiOIj
oo4pn3xWv55kulc13nq7mhhaSg2FYTHSfkK1/YjxGsKrU9H61IwEKR4v2niO
tY5YpA6IjY5Jk6fEIra2Sm0g4n0V2Va3aeS11/5i+02kicp7y5lq5gpk96dz
Az/C5QnHF+sZU4UaZPGJ5n1Ml+1EKb3znJGHJmltvHjA2VaBSA6jy6jv0SKT
Bg8IxxcrEYVl6bwXjHTI8c/M7EFBdYKRX2p4vHoPOVzuYM75qUFIlFbYN+sa
kOevSiQefKZFCLcX3yZ3EuQJFM/rW6VHlJmLOiVZmZJC0scHuz4bEL7jDaTR
SwtyrRPfi/xrxoShlq5MwFdb8g8hD7338jbEgNdifeusK2k6u1vPy8zUSD6A
KKw/bd/yfyfbJnA=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043887#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043913#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043939#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
QTXCFYWyy08Ps63MGar9Sgf/cTT/H2Rr7Po=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043965#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2043991#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
+sUJydR474oyNz9w9tNXGRemw4F/AabyJRA=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044017#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044043#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
FfU7ieoOFFXey/3EfwGGQgkn
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044069#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
Wzvr59RR4m7h6cgphpnZeKF6+RPbA43/ADprTG0=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044095#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
uaXf9AmB9y0Olv8DwED28A==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044121#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
UqdcCO+5gMG6rMNmt7StNh2wOdr0D5FIYW8=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044147#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
JC/uEfq/9OYicQ==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044173#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
cwX/AkdRuUA=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044199#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044225#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
+ohXwdccrd7V0bxLcvbX/Q/exvkI
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044251#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
ZFPW24Fzh6sT2Kx/AEcarDU=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044277#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
ztd+Tcik6k8dmtvSPs4/gNnV9Q==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044303#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
3FXborFlbdph19+UIIjo
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2044329#1"]& ]}}, {}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, PlotLabel -> None, 
                ImageSize -> 240, PlotRange -> Automatic, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], AxesLabel -> {
                  FormBox[
                   RowBox[{"Re", "(", "Z", ")"}], TraditionalForm], 
                  FormBox[
                   RowBox[{"Im", "(", "Z", ")"}], TraditionalForm]}, 
                PlotLabel -> FormBox[
                  RowBox[{"{", 
                    RowBox[{"Z", "(", "1", ")"}], "}"}], TraditionalForm], 
                DisplayFunction -> Identity, PlotRangePadding -> {{
                   Scaled[0.05], 
                   Scaled[0.05]}, {
                   Scaled[0.05], 
                   Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                All, DisplayFunction -> Identity, Axes -> {True, True}, 
                AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], 
                FrameTicks -> {{Automatic, Automatic}, {
                  Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                Method -> {
                 "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "ScalingFunctions" -> None}, PlotRange -> {All, All}, 
                PlotRangeClipping -> True, 
                PlotRangePadding -> {Automatic, Automatic}, 
                Ticks -> {Automatic, Automatic}}], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   RowBox[{"Z", "(", "1", ")"}]}, "RowDefault"], "\[NoBreak]",
                  "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "800", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`Z[1]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`Z], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1901258[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1901258["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`Z], 
                    Derivative[
                    Part[#, 2]][$CellContext`Z]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["z", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1901258["`1`\[Hyphen]range", {
                    Style["z", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1903123$$ = 
                 False, $CellContext`Y1$1903128$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$1903129$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
1903130$$ = 0, CalculateScan`ODEScan`Private`iSQ$1903131$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1903123$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$1903128$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
1903129$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$1903130$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$1903131$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{}, 
                    CalculateScan`ODEScan`Private`eqs = 
                    Flatten[{{
                    Derivative[
                    1][$CellContext`Z][$CellContext`z]^2 == \
$CellContext`z^(-2) ((
                    1 - $CellContext`z^2)/$CellContext`Z[$CellContext`z])}, \
{}, CalculateScan`ODEScan`Private`addInits = Thread[{
                    $CellContext`Z[1]} == Tan[{$CellContext`Y1$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs, $CellContext`Z, \
{$CellContext`z, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs, $CellContext`Z, \
{$CellContext`z, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    Head[CalculateScan`ODEScan`Private`sol] === NDSolve, 
                    CalculateScan`ODEScan`Private`sol === "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1901258["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds]; 
                    CalculateScan`ODEScan`Private`xRange = {
                    1, 1 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    CalculateScan`ODEScan`Private`yPlotRe = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`Z][$CellContext`z]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`z, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`Z, 
                    Superscript[$CellContext`Z, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotRe, PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]], 
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe + \
{(-1)/3, 1/3} Abs[
                    Apply[Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]]; 
                    Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`Z][
                    RawBoxes[
                    FormBox["z", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`Z][$CellContext`z]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`Z][$CellContext`z]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`z, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotRange -> 
                    Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`Z, 
                    Superscript[$CellContext`Z, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm, PlotRange], 2]; 
                    If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
, Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm]] > 1/3], Null, 
                    
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm}], CalculateScan`ODEScan`Private`yPlotReIm], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`Z][
                    RawBoxes[
                    FormBox["z", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`Z][
                    RawBoxes[
                    FormBox["z", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe = ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`Z][$CellContext`z], 
                    Derivative[#2][$CellContext`Z][$CellContext`z]}& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`z, 
                    CalculateScan`ODEScan`Private`xRange}]], AxesLabel -> {
                    Superscript[$CellContext`Z, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`Z, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    Identity[#], 
                    Re[#]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`Z], 
                    Derivative[
                    Part[#, 2]][$CellContext`Z]}]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`Z[1]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 1}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`Z], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1901258[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1901258["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`Z], 
                    Derivative[
                    Part[#, 2]][$CellContext`Z]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]], ControlType -> CheckboxBar,
                     ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["z", "max"]}, -1, 1, ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 6}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1901258["`1`\[Hyphen]range", {
                    Style["z", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RnSABA9Igw7GpAElKe+\
9JU5i4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS6IUFTy5gs9uGRMSvUcY/CCx81035r2QM9Du/\
BrfBxYVDDT5qimjmhI13ZeQZzRStWcs6bH5yZSJCBj9SR4PXz0d7rx46WAwljFoTSRXz9pC5pkERZI\
eAl0z5i0D/s0dH5THTwVjIfleEB4Rdd94JxJiAyM4MMzH+\
9bLzdQdTEwDj0HGF06Tleeo7QVKS8rTCZnl+Mb5ZA3bAoNMlePmbsnNOgW58G/\
gAxHamJzHJm3PlkC/MC4ZfWdl9c+5G+B5ty28FCericP83jDkDTQ9JmqZziet6+QYqbrWRj/\
n6qLmy0aDPH/K1P9Lh1Tp5TB22oZBZkemxqu1twz/vC28yLHr5+K+\
Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShbqDjrIvf1TcSi5nmgx5P+\
CapESuFf1NrI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFX7EtUlHYsDW5pT/yT6ZYEPCU911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwFqc7hu"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "8", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.831", 
    "parsetiming" -> "0.557", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP1731202fa9a48102ibi3000023h3450177d0hi56", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "18", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1732202fa9a48102ibi300001a5b9050b57g62ic2812829786434294891", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2020, 8, 27, 19, 23, 7.0898102`8.603209578988533}, "Line" -> 4,
     "SessionID" -> 24204268999215068940}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "(dZ/dz)^2 = (1 - z^2)/(Z*z^2)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{889., {700., 707.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8075629871266713`*^9},ExpressionUUID->"ff739bdc-2775-4e60-8725-\
712046cde569"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"ArcCos", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.807571773676358*^9, 3.8075717804628973`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"afb477db-1719-4f53-87e8-b242b90d357e"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", 
   SqrtBox[
    RowBox[{"1", "-", 
     SuperscriptBox["x", "2"]}]]]}]], "Output",
 CellChangeTimes->{3.8075717810941925`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"c2eeedc4-9f26-4a05-ad3c-d3c0139cb6f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["TaylorSeries acos(x)", "WolframAlphaLong",
 CellChangeTimes->{{3.8075762478687644`*^9, 3.8075762736351976`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"d120deb8-e748-48f6-8c47-f806ecd1e1dd"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "TaylorSeries acos(x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[ArcCos[x], {x, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], ScriptLevel -> 0, 
                    StripOnInput -> False]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "cos^(-1)(x) is the inverse cosine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcCos.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcCos", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseCosine.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx = 0", "position" -> "200", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[ArcCos[x], {x, 0, 7}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["\[Pi]", "2"], "-", "x", "-", 
                    FractionBox[
                    SuperscriptBox["x", "3"], "6"], "-", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", "5"]}], "40"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "7"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 7, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["\[Pi]", "2"], ",", 
                    RowBox[{"-", "1"}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "6"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["3", "40"]}]}], "}"}], ",", "0", ",", "7", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtx = 0__More terms"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtx =Infinity", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[ArcCos[x], {x, Infinity, 6}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", "x", ")"}]}], "+", 
                    RowBox[{"log", "(", "4", ")"}]}], ")"}]}], "-", 
                    FractionBox["\[ImaginaryI]", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]], "-", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], 
                    RowBox[{"32", " ", 
                    SuperscriptBox["x", "4"]}]], "-", 
                    FractionBox[
                    RowBox[{"5", " ", "\[ImaginaryI]"}], 
                    RowBox[{"96", " ", 
                    SuperscriptBox["x", "6"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "7"], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, 0, 7, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Log", "[", "4", "]"}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", "x", "]"}]}]}], ")"}]}], ",", "0", 
                    ",", 
                    RowBox[{"-", 
                    FractionBox["\[ImaginaryI]", "4"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "32"]}], ",", "0", 
                    ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", "\[ImaginaryI]"}], "96"]}]}], "}"}], 
                    ",", "0", ",", "7", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtx =Infinity__More terms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Approximations about x = 0 up to order 3", "scanner" -> 
     "Series", "id" -> "PlotOfSeriesExpansionAtx = 0", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 FormBox[
                  StyleBox[
                   
                   DynamicModuleBox[{
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1616$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                    Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                    Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                    Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = 
                    False, Typeset`skipInitDone$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1764688$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`min1616$1764693$$ = 0,
                     CalculateUtilities`GraphicsUtilities`Private`max1617$\
1764694$$ = 0}, 
                    DynamicBox[
                    Manipulate`ManipulateBoxes[
                    2, TraditionalForm, 
                    "Variables" :> {
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1616$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                    "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1764688$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1616$\
1764693$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1617$\
1764694$$, 0]}, "OtherVariables" :> {
                    Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1764650[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][{
                    ArcCos[$CellContext`x], 
                    Tooltip[Rational[1, 2] Pi, "order = 0"], 
                    Tooltip[Rational[1, 2] Pi - $CellContext`x, "order = 1"], 
                    Tooltip[
                    Rational[1, 2] Pi - $CellContext`x + 
                    Rational[-1, 6] $CellContext`x^3, 
                    "order = 3"]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$], 
                    (
                    Piecewise[{{
                    0. + 2.766470957387828 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 2.766470957387828 
                    Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$], \
-2.5877966232514367`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$]], 
                    (
                    Piecewise[{{
                    0. + 2.766470957387828 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 2.766470957387828 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$ + 
                    0.005175593246502874, 
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$]], 
                    2.5877966232514367`]}, Evaluated -> True, PlotStyle -> {
                    Directive[
                    
                    RGBColor[{0.996078431372549, 0.396078431372549, 
                    0.09411764705882353}], 
                    Thickness[Large]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4, 1, 4, 1, 4}]]}, 
                    Filling -> {1}, FillingStyle -> Opacity[0.02], 
                    Exclusions -> {0}, ImageSize -> 330., PerformanceGoal -> 
                    "Quality"]], 
                    "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1616$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1617$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                    "Options" :> {
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                    "DefaultOptions" :> {}], SingleEvaluation -> True], 
                    Initialization :> ({
                    ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1764650]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1764650[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1764650[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                    ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMNBjbJySggzFpQEnK995ip7Fw7WA72+\
DPg89ukmbtKsV0gKb0w6m+NI/vnnvuek+OZJT2e72evmrNB8lJegNPj60ZylkuC0HeneaKas2kSK/\
gs9vWxNTsUQ4/KPG+69a8l2oGxp9f4fvAk4KDoV8N48wwqif7CvKMJbr2jBQ7tj+ZcJkAZz/\
p063dne2dl7seBmMZgTFUCf2iLWSeKdA07SHQNWvechDf/\
PFRefxUcB7T7wUVCdUPrHesgFgYKYBjPsG3Xm6m7mJiBgQBRS6cJifPYdsLtFFMTMd0luMb55O11RY\
Y1FR7bu6V3KxTkA//Jj6QsYvJe1zS7uwIDAvjktF3Vlb/nLsBnl+\
3hVfyZDVxmN8bjryBYcdUL9P5rHWdPCNV17ro51xd1HzZaJDnT5n6f+\
mQabMcxvO2YdDZka3xau0tw2+3hZc5dv1c3Pet+\
ewdJeCq4VAJ7qMkBZ9H0Ux54CXaPl2dW4fHuFPxHaMzpIIVTmTjLPvF9cfDCrzeFGKs3WQD0hH1DIh\
oTq2LOG732JSZYQYKEgs8v65fNtlY1qEE3Nm+9kwQZgeYJ2Td8oTmIF2oO5gk+/\
JHxa3kcqbJkPcDYeiUqrWiv4X1UZZcQcYyMJIYL2jqNZjDKqkRqGDZD0qQOAfBEJL9sh/\
3zT9crARSta9QXcqzOHClOQ1Pol8W+\
JCKqcmaO3bg6ApuW8wmkie16iKWpovTZnNM95tMN25oDvRQEkJLEj7Qu02h2xT+\
6qawtAd3a0K3JnRrQrcmdGvC/7smuIjxX+k3LVS4vg=="]]}; Typeset`initDone$$ = True), 
                    DynamicModuleValues :> {}, Deinitialization :> None, 
                    UntrackedVariables :> {Typeset`size$$}, 
                    SynchronousInitialization -> True, 
                    UnsavedVariables :> {Typeset`initDone$$}, 
                    UndoTrackedVariables :> {
                    Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
                   Deployed -> True, StripOnInput -> False], TraditionalForm], 
                 Manipulate`InterpretManipulate[1]]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   
                   TemplateBox[{
                    "\"order \"", "n", "\" approximation shown with \"", "n", 
                    "\" dots\""}, "RowDefault"], "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "PlotOfSeriesExpansionAtx = 0__More terms"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> "Series", "id" -> 
     "SeriesRepresentations", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ArcCos[x] == Pi/2 - Sum[(x^(1 + 2 k) Pochhammer[1/2, k])/(k! + 2 k \
k!), {k, 0, Infinity}] /; Abs[x] < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{
                    FractionBox["\[Pi]", "2"], "-", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["x", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]], " ", 
                    TemplateBox[{
                    FractionBox["1", "2"], "k"}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox]}], 
                    RowBox[{
                    RowBox[{"k", "!"}], "+", 
                    RowBox[{"2", " ", "k", " ", 
                    RowBox[{"k", "!"}]}]}]]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TemplateBox[{"x"}, "Abs"], "<", "1"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ArcCos[x] == Sqrt[2 - 2 x] Sum[((1 - x)^k Pochhammer[1/2, k])/(2^k \
(k! + 2 k k!)), {k, 0, Infinity}] /; Abs[-1 + x] < 2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{
                    SqrtBox[
                    RowBox[{"2", "-", 
                    RowBox[{"2", " ", "x"}]}]], " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["2", 
                    RowBox[{"-", "k"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    FractionBox["1", "2"], "k"}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox]}], 
                    RowBox[{
                    RowBox[{"k", "!"}], "+", 
                    RowBox[{"2", " ", "k", " ", 
                    RowBox[{"k", "!"}]}]}]]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}]}, "Abs"], "<", "2"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ArcCos[x] == Pi - Sqrt[2] Sqrt[1 + x] Sum[((1 + x)^k Pochhammer[1/2, \
k])/(2^k (k! + 2 k k!)), {k, 0, Infinity}] /; Abs[1 + x] < 2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{"\[Pi]", "-", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]], " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["2", 
                    RowBox[{"-", "k"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    FractionBox["1", "2"], "k"}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox]}], 
                    RowBox[{
                    RowBox[{"k", "!"}], "+", 
                    RowBox[{"2", " ", "k", " ", 
                    RowBox[{"k", "!"}]}]}]]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"1", "+", "x"}]}, "Abs"], "<", "2"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ArcCos[x] == ArcCos[Subscript[z, 0]] - (Sqrt[Pi] Sum[(2^k \
HypergeometricPFQRegularized[{1/2, 1/2, 1}, {1 - k/2, (3 - k)/2}, \
Subscript[z, 0]^2] (x - Subscript[z, 0])^k Subscript[z, 0]^(1 - k))/k!, {k, \
1, Infinity}])/2 /; NotElement[Subscript[\[ScriptZ], 0], Reals] || ( !1 \
\[LessEqual] Subscript[\[ScriptZ], 0] < Infinity &&  !-Infinity < Subscript[\
\[ScriptZ], 0] \[LessEqual] -1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], "\[LongEqual]", 
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["cos", 
                    RowBox[{"-", "1"}]], "(", 
                    SubscriptBox["z", "0"], ")"}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["2", "k"], " ", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[InvisiblePrefixScriptBase]", "3"], 
                    SubscriptBox[
                    OverscriptBox["F", "~"], "2"]}], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["1", "2"], HypergeometricPFQRegularized, 
                    Editable -> True, Selectable -> True], ",", 
                    TagBox[
                    FractionBox["1", "2"], HypergeometricPFQRegularized, 
                    Editable -> True, Selectable -> True], ",", 
                    TagBox[
                    "1", HypergeometricPFQRegularized, Editable -> True, 
                    Selectable -> True]}], 
                    InterpretTemplate[{
                    SlotSequence[1]}& ]], HypergeometricPFQRegularized, 
                    Editable -> False, Selectable -> False], ";", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1", "-", 
                    FractionBox["k", "2"]}], HypergeometricPFQRegularized, 
                    Editable -> True, Selectable -> True], ",", 
                    TagBox[
                    FractionBox[
                    RowBox[{"3", "-", "k"}], "2"], 
                    HypergeometricPFQRegularized, Editable -> True, 
                    Selectable -> True]}], 
                    InterpretTemplate[{
                    SlotSequence[1]}& ]], HypergeometricPFQRegularized, 
                    Editable -> False, Selectable -> False], ";", 
                    TagBox[
                    SubsuperscriptBox["z", "0", "2"], 
                    HypergeometricPFQRegularized, Editable -> True, 
                    Selectable -> True]}], ")"}]}], 
                    InterpretTemplate[
                    HypergeometricPFQRegularized[#, #2, #3]& ], Editable -> 
                    False, Selectable -> False], 
                    HypergeometricPFQRegularized], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], " ", 
                    SubsuperscriptBox["z", "0", 
                    RowBox[{"1", "-", "k"}]]}], 
                    RowBox[{"k", "!"}]]}]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["\[ScriptZ]", "0"], "\[NotElement]", 
                    TemplateBox[{}, "Reals"]}], 
                    StyleBox[
                    "\" or \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    TemplateBox[{"\"not \"", 
                    RowBox[{"1", "\[LessEqual]", 
                    SubscriptBox["\[ScriptZ]", "0"], "<", "\[Infinity]"}]}, 
                    "RowDefault"], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", ")"}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    TemplateBox[{"\"not \"", 
                    RowBox[{
                    RowBox[{"-", "\[Infinity]"}], "<", 
                    SubscriptBox["\[ScriptZ]", "0"], "\[LessEqual]", 
                    RowBox[{"-", "1"}]}]}, "RowDefault"], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[NoBreak]", ")"}]}, "RowDefault"], "\[NoBreak]", 
                    ")"}]}, "RowDefault"], "\[NoBreak]", ")"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "SeriesRepresentations__More"}, {}]}], 
     XMLElement["infos", {"count" -> "6"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "(a)_n is the Pochhammer symbol (rising factorial)"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/Pochhammer.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Pochhammer", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PochhammerSymbol.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> 
         "_pF^~_q(a_1, ..., a_p; b_1, ..., b_q; z) is the regularized \
generalized hypergeometric function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/\
HypergeometricPFQRegularized.html", "text" -> "Documentation", "title" -> 
           "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/HypergeometricFunctions/\
HypergeometricPFQRegularized", "text" -> "Properties", "title" -> 
           "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/GeneralizedHypergeometricFunction.\
html", "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/ArcCos/06/\
ShowAll.html", "text" -> "More information"}, {}]}]}]}], Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False, False, False, False}, True}, 
   Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
     "Series", "timedout" -> "Series", "timedoutpods" -> "", "timing" -> 
     "2.7720000000000002", "parsetiming" -> "0.259", "parsetimedout" -> 
     "false", "recalculate" -> 
     "https://www4d.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa50531i3ahib0a919i6fa000061h81dh21337fiic8360990543289014181", "id" -> 
     "MSP50541i3ahib0a919i6fa00005573d84988a4gi6f", "host" -> 
     "https://www4d.wolframalpha.com", "server" -> "40", "related" -> 
     "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa50551i3ahib0a919i6fa00001e9e38b3gh5cgf898360990543289014181", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "Series", "timedout" -> "Series", "timedoutpods" -> "", 
     "timing" -> "2.951", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "40", "host" -> 
     "https://www4d.wolframalpha.com", "server" -> "40", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2020, 8, 27, 23, 4, 37.9046069`9.331266885271667}, "Line" -> 6,
     "SessionID" -> 24204268999215068940}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "TaylorSeries acos(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{889., {521., 528.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www4d.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa50531i3ahib0a919i6fa000061h81dh21337fiic8360990543289014181", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.807576277960457*^9},ExpressionUUID->"1ecad4fb-2389-4fd3-aa4b-\
1e9aee6e5b6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Taylor series sqrt(x^2-1)", "WolframAlphaLong",
 CellChangeTimes->{{3.807576414549881*^9, 3.8075764285152364`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"857111d1-f7f9-4dee-8df0-cfa35b6211d9"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Taylor series sqrt(x^2-1)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sqrt[x^2 - 1], {x, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"series\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "-", "1"}]], ScriptLevel -> 0, 
                    StripOnInput -> False]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {
    "title" -> "Series expansion at x = -1", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtx = -1", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sqrt[-1 + x^2], {x, -1, 8}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]], "-", 
                    FractionBox[
                    RowBox[{
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"5", "/", "2"}]]}], 
                    RowBox[{"16", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"7", "/", "2"}]]}], 
                    RowBox[{"64", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"9", "/", "2"}]]}], 
                    RowBox[{"1024", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"11", "/", "2"}]]}], 
                    RowBox[{"4096", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{"21", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"13", "/", "2"}]]}], 
                    RowBox[{"32768", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{"33", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], 
                    RowBox[{"15", "/", "2"}]]}], 
                    RowBox[{"131072", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", "1"}]]}], ")"}]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "8"], ")"}], 
                    SeriesData[$CellContext`x, -1, {}, 1, 16, 2], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]]}], 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]], 
                    RowBox[{"2", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]], 
                    RowBox[{"16", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]], 
                    RowBox[{"64", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]]}], 
                    RowBox[{"1024", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]]}], 
                    RowBox[{"4096", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"21", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]]}], 
                    RowBox[{"32768", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"33", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", "x"}]]}], 
                    RowBox[{"131072", " ", 
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", "x"}]]}]]}]}], "}"}], ",", "1", ",", 
                    "16", ",", "2"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtx = -1__More terms"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx = 0", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sqrt[-1 + x^2], {x, 0, 7}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{"\[Piecewise]", 
                GridBox[{{
                   RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "6"]}], "16"], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "4"]}], "8"], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}], "2"], "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], 
                   RowBox[{
                    RowBox[{"Im", "(", 
                    SuperscriptBox["x", "2"], ")"}], "<", "0"}]}, {
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "6"]}], "16"]}]}], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "4"]}], "8"], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}], "2"], "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], 
                   StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"otherwise\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, 
                 ColumnWidths -> Automatic, 
                 AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                 Editable -> True]}}, ColumnAlignments -> {Left}, 
              ColumnSpacings -> 0.5, ColumnWidths -> Automatic], "Piecewise", 
             SyntaxForm -> Span, SelectWithContents -> True, 
             StripWrapperBoxes -> True, Selectable -> False, Editable -> 
             False, DeleteWithContents -> True], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Im(z) is the imaginary part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Im.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Im", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ImaginaryPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = 2", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx = 2", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sqrt[-1 + x^2], {x, 2, 6}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    SqrtBox["3"], "+", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}]}], 
                    SqrtBox["3"]], "-", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}], "2"], 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], "+", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}], "3"], 
                    RowBox[{"9", " ", 
                    SqrtBox["3"]}]], "-", 
                    FractionBox[
                    RowBox[{"17", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}], "4"]}], 
                    RowBox[{"216", " ", 
                    SqrtBox["3"]}]], "+", 
                    FractionBox[
                    RowBox[{"19", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}], "5"]}], 
                    RowBox[{"324", " ", 
                    SqrtBox["3"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "2"}], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`x, 2, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "2", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SqrtBox["3"], ",", 
                    FractionBox["2", 
                    SqrtBox["3"]], ",", 
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]]}], ",", 
                    FractionBox["1", 
                    RowBox[{"9", " ", 
                    SqrtBox["3"]}]], ",", 
                    RowBox[{"-", 
                    FractionBox["17", 
                    RowBox[{"216", " ", 
                    SqrtBox["3"]}]]}], ",", 
                    FractionBox["19", 
                    RowBox[{"324", " ", 
                    SqrtBox["3"]}]]}], "}"}], ",", "0", ",", "6", ",", "1"}], 
                    "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtx = 2__More terms"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtx =Infinity", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sqrt[-1 + x^2], {x, Infinity, 9}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{"x", "-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", "x"}]], "-", 
                    FractionBox["1", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["x", "3"]}]], "-", 
                    FractionBox["1", 
                    RowBox[{"16", " ", 
                    SuperscriptBox["x", "5"]}]], "-", 
                    FractionBox["5", 
                    RowBox[{"128", " ", 
                    SuperscriptBox["x", "7"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "9"], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, -1, 9, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "16"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["5", "128"]}]}], "}"}], ",", 
                    RowBox[{"-", "1"}], ",", "9", ",", "1"}], "]"}]}, 
                    "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Laurent series\"", "\[NoBreak]",
                     "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"converges everywhere away from origin\"", "\[NoBreak]",
                     "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtx =Infinity__More terms"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Approximations about x = -1 up to order 3", "scanner" -> 
     "Series", "id" -> "PlotOfSeriesExpansionAtx = -1", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 FormBox[
                  StyleBox[
                   
                   DynamicModuleBox[{
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5646$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                    Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                    Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                    Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = 
                    False, Typeset`skipInitDone$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3469816$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`min5646$3469821$$ = 0,
                     CalculateUtilities`GraphicsUtilities`Private`max5647$\
3469822$$ = 0}, 
                    DynamicBox[
                    Manipulate`ManipulateBoxes[
                    2, TraditionalForm, 
                    "Variables" :> {
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5646$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                    "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3469816$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5646$\
3469821$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5647$\
3469822$$, 0]}, "OtherVariables" :> {
                    Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3469778[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[CalculateUtilities`GraphicsUtilities`Private`aspect]
                    , Automatic, 1/GoldenRatio]]], 
                    HoldAll][{(-1 + $CellContext`x^2)^Rational[1, 2], 
                    Tooltip[
                    2^Rational[1, 2] (-1 - $CellContext`x)^Rational[1, 2], 
                    "order = 1"], 
                    Tooltip[
                    2^Rational[1, 2] (-1 - $CellContext`x)^
                    Rational[1, 2] + ((Rational[-1, 2] 
                    2^Rational[-1, 2]) (-1 - $CellContext`x)^Rational[1, 2]) (
                    1 + $CellContext`x), "order = 2"], 
                    Tooltip[
                    2^Rational[1, 2] (-1 - $CellContext`x)^
                    Rational[1, 2] + ((Rational[-1, 2] 
                    2^Rational[-1, 2]) (-1 - $CellContext`x)^Rational[1, 2]) (
                    1 + $CellContext`x) + ((Rational[-1, 16] 
                    2^Rational[-1, 2]) (-1 - $CellContext`x)^Rational[1, 2]) (
                    1 + $CellContext`x)^2, "order = 3"]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$], 
                    (
                    Piecewise[{{-0.9999999999999999 + 
                    1.6649388906210874` Tan[1.5040801783846716` #], # < 
                    0}}, -0.9999999999999999 + 
                    1.6649388906210874` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$], \
-2.557407724654901], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$]], 
                    (
                    Piecewise[{{-0.9999999999999999 + 
                    1.6649388906210874` Tan[1.5040801783846716` #], # < 
                    0}}, -0.9999999999999999 + 
                    1.6649388906210874` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$ + 
                    0.003114815449309802, 
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$]], 
                    0.5574077246549012]}, Evaluated -> True, PlotStyle -> {
                    Directive[
                    RGBColor[{0.996078431372549, 0.396078431372549, 
                    0.09411764705882353}], 
                    Thickness[Large]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4, 1, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4, 1, 4, 1, 4}]]}, 
                    Filling -> {1}, FillingStyle -> Opacity[0.02], 
                    Exclusions -> {-1}, ImageSize -> 330., PerformanceGoal -> 
                    "Quality"]], 
                    "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5646$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5647$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                    "Options" :> {
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                    "DefaultOptions" :> {}], SingleEvaluation -> True], 
                    Initialization :> ({
                    ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3469778]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3469778[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3469778[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                    ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMBBtvH5CADsakASUp33uLndTCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kFHa7/\
V6+qI1HyQn6RU83bdmKGe5LAR5d5wrqjWTIr2Az65bE1OzQzn8oMT7LlvzXqoZGH9+\
he8DTwoOhn41jDPDqJ7sKsinLNG1Z6TYof3JhMsEOPtJH25tP3v5/\
MVTD4OxjMAYqoTeaguZTxVomvYQ6JI1bzmIb/54rzx+KjiP6feCioTqO9Y7VkAsjBTAMZ/\
gW883UzcxMQOCgCJnTpOT57DtBdooJrIxneX4xulkPW4LDCrTnptbJTfrFOTDv4oPZOxi8h6XtDs7A\
sPCOGf0nZTVP+dugOfXbeGVPFpNHOb3hiNvYNgh1ct0PmpdJ89I1bUu+jlXZzVfNhrk6VOm/l/\
aZ9osh/GkbRh0dmBrvFp7y/DbbeFljl0/F/\
dtaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5UfMfoDKlghRPZOMt+\
cf1xtwKvN4UYazfZgHREPQMimlPrIo7bHZYxM5yCgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2UsX6g4mmX75o+\
JWcjnRZMj7njA0o2qt6K9hfZQlV5CxDIwkxguaeg3msEpqBCpY9oMSJM5BMIRkv+\
zHffMPFyuBVO0qVJfyLA5caY7Dk+iXBd6nIjPT5o4dOLqC2xazieRRrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DQibuO4="]]}; 
                    Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                    Deinitialization :> None, 
                    UntrackedVariables :> {Typeset`size$$}, 
                    SynchronousInitialization -> True, 
                    UnsavedVariables :> {Typeset`initDone$$}, 
                    UndoTrackedVariables :> {
                    Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
                   Deployed -> True, StripOnInput -> False], TraditionalForm], 
                 Manipulate`InterpretManipulate[1]]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   
                   TemplateBox[{
                    "\"order \"", "n", "\" approximation shown with \"", "n", 
                    "\" dots\""}, "RowDefault"], "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "PlotOfSeriesExpansionAtx = -1__More terms"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Approximations about x = 2 up to order 3", "scanner" -> 
     "Series", "id" -> "PlotOfSeriesExpansionAtx = 2", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 FormBox[
                  StyleBox[
                   
                   DynamicModuleBox[{
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1887$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                    Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                    Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                    Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = 
                    False, Typeset`skipInitDone$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2154662$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`min1887$2154667$$ = 0,
                     CalculateUtilities`GraphicsUtilities`Private`max1888$\
2154668$$ = 0}, 
                    DynamicBox[
                    Manipulate`ManipulateBoxes[
                    2, TraditionalForm, 
                    "Variables" :> {
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1887$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                    "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2154662$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1887$\
2154667$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1888$\
2154668$$, 0]}, "OtherVariables" :> {
                    Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2154624[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][{(-1 + $CellContext`x^2)^Rational[1, 2], 
                    Tooltip[3^Rational[1, 2], "order = 0"], 
                    Tooltip[
                    3^Rational[1, 2] + (2 
                    3^Rational[-1, 2]) (-2 + $CellContext`x), "order = 1"], 
                    Tooltip[
                    3^Rational[1, 2] + (2 
                    3^Rational[-1, 2]) (-2 + $CellContext`x) + (
                    Rational[-1, 6] 
                    3^Rational[-1, 2]) (-2 + $CellContext`x)^2, "order = 2"], 
                    Tooltip[
                    3^Rational[1, 2] + (2 
                    3^Rational[-1, 2]) (-2 + $CellContext`x) + (
                    Rational[-1, 6] 
                    3^Rational[-1, 2]) (-2 + $CellContext`x)^2 + (
                    Rational[1, 9] 3^Rational[-1, 2]) (-2 + $CellContext`x)^3,
                     "order = 3"]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$], 
                    (
                    Piecewise[{{
                    2. + 1.6649388906210874` Tan[1.5040801783846716` #], # < 
                    0}}, 2. + 
                    1.6649388906210874` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$], 
                    0.44259227534509904`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$]], 
                    (
                    Piecewise[{{
                    2. + 1.6649388906210874` Tan[1.5040801783846716` #], # < 
                    0}}, 2. + 
                    1.6649388906210874` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$ + 
                    0.003114815449309802, 
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$]], 
                    3.557407724654901]}, Evaluated -> True, PlotStyle -> {
                    Directive[
                    
                    RGBColor[{0.996078431372549, 0.396078431372549, 
                    0.09411764705882353}], 
                    Thickness[Large]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4, 1, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4, 1, 4, 1, 4}]]}, 
                    Filling -> {1}, FillingStyle -> Opacity[0.02], 
                    Exclusions -> {2}, ImageSize -> 330., PerformanceGoal -> 
                    "Quality"]], 
                    "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1887$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1888$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                    "Options" :> {
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                    "DefaultOptions" :> {}], SingleEvaluation -> True], 
                    Initialization :> ({
                    ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2154624]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2154624[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2154624[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                    ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkboNviHBOjYmDShJ+\
d5b4iQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/5iQiSfq/XUzeN+\
SBYnGzh6ZkxIzHLRcHj9+e5JEpRwZMb+OyeMSHR+4TBDxI7321jDoScgXbnN/g+\
sKhgoMlXTRnVlKjpoYQ8o5GqPWNJT81PpkxEwOhP8mJ7+\
Gr39c7QwWAsY9CaSK522kLmmQRFkh4C3TJmjwH/5o5Py+OngrGQfC8Ij4h6bLwTCbGBERwY5uN96/\
Vm6gEmpoHHIOMrp8nKc9T2AqUl5emEzHJ843Kyhm2BQabKcfOw5Gadglz4d/\
CBCG1MzmOTtmdLoF8Y14y+i7L659wN8Py2LbwUZ6uJw/zeMeQNND0lapnOl63r5BiputZGP+\
fqqubLRoO8fMrU/0vHVOnlMLbbhkFmJ6bGq7W3DL/\
bFl7k2PVzcT8y5rNzlICrhkMluI8iLtg8imbKAyfR9umq3Dgcxv2K7xCdPhWscAITZ9kvtj+\
eVOD1phBi7aYbkA6vZ0BAcmJcseV2n6ZUjzKQEBng+\
XX9sskmog7F4872tac8pmaAOULWLU9ojpKFuoOOsi9/VNxKLheaDHk/4pqkRK4V/\
V2sjzTk8ngiPCMJ8YKmXr05rJIag/SW/aAECXPgFCHpL/Ox39zDxUogVYcS1SUdiwNbmnP/\
JPplgY8JT3XW3LE9R5d322I2gTirVRfQJFmcNptjut9kunFDc6D7kuBbEv+\
B3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUaM/0q/AYNRuE4="]]}; 
                    Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                    Deinitialization :> None, 
                    UntrackedVariables :> {Typeset`size$$}, 
                    SynchronousInitialization -> True, 
                    UnsavedVariables :> {Typeset`initDone$$}, 
                    UndoTrackedVariables :> {
                    Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
                   Deployed -> True, StripOnInput -> False], TraditionalForm], 
                 Manipulate`InterpretManipulate[1]]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   
                   TemplateBox[{
                    "\"order \"", "n", "\" approximation shown with \"", "n", 
                    "\" dots\""}, "RowDefault"], "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "PlotOfSeriesExpansionAtx = 2__More terms"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series representation", "scanner" -> "Series", "id" -> 
     "SeriesRepresentations", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sqrt[-1 + x^2] == Sum[Piecewise[{{I^(1 - n) Binomial[1/2, n/2], \
Mod[n, 2] == 0 && n >= 0}}, 0] x^n, {n, -Infinity, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                SqrtBox[
                 RowBox[{
                   RowBox[{"-", "1"}], "+", 
                   SuperscriptBox["x", "2"]}]], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"n", "=", "-\[Infinity]"}], "\[Infinity]"], 
                  RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"\[Piecewise]", 
                    GridBox[{{
                    TagBox[
                    RowBox[{
                    SuperscriptBox[
                    TagBox["\[ImaginaryI]", HoldForm], 
                    RowBox[{"1", "-", "n"}]], " ", 
                    TemplateBox[{
                    FractionBox["1", "2"], 
                    FractionBox["n", "2"]}, "Binomial"]}], HoldForm], 
                    StyleBox[
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    TemplateBox[{"n", "2"}, "Mod"], "\[LongEqual]", "0"}], 
                    "\" and \"", 
                    RowBox[{"n", "\[GreaterEqual]", "0"}]}, "RowDefault"], 
                    "\[NoBreak]", ")"}], {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox["0", HoldForm], 
                    StyleBox[
                    "\"otherwise\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, ColumnAlignments -> {Left}, ColumnSpacings -> 1.2, 
                    ColumnWidths -> Automatic, 
                    AllowedDimensions -> {2, Automatic}, Selectable -> True, 
                    Editable -> True]}}, AllowScriptLevelChange -> False, 
                    ColumnAlignments -> {Left}, ColumnSpacings -> 0.5, 
                    ColumnWidths -> Automatic], "Piecewise", SyntaxForm -> 
                    Span, SelectWithContents -> True, StripWrapperBoxes -> 
                    True, Selectable -> False, Editable -> False, 
                    DeleteWithContents -> True], ")"}], " ", 
                    SuperscriptBox["x", "n"]}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "binomial(n, m) is the binomial coefficient"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Binomial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Binomial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/BinomialCoefficient.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sqrt/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "8", "datatypes" -> 
    "Series", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.974", 
    "parsetiming" -> "0.43", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP597712iag7gg7bcbbh4000002ec73b68i5497ee7", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "41", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa597812iag7gg7bcbbh4000000da07hfgf582gc422988411736343457746", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2020, 8, 27, 23, 7, 12.9696848`8.865504378058466}, "Line" -> 7,
     "SessionID" -> 24204268999215068940}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Taylor series sqrt(x^2-1)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{889., {711., 718.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8075764330006447`*^9},ExpressionUUID->"2a1257e2-987a-4bf6-8d5b-\
606c85c5d176"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", "/", "3"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", 
        RowBox[{"Z", "[", "z", "]"}]}], ")"}], "^", 
      RowBox[{"(", 
       RowBox[{"3", "/", "2"}], ")"}]}]}], "\[Equal]", 
    RowBox[{
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{"z", "^", "2"}], "-", "1"}], "]"}], "-", 
     RowBox[{"ArcSec", "[", "z", "]"}]}]}], ",", "z", ",", 
   RowBox[{"InverseFunctions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8075821856579638`*^9, 3.8075821937874465`*^9}, {
  3.8075823732720737`*^9, 3.8075824383361053`*^9}, {3.807582602265676*^9, 
  3.807582605376257*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"c083f3ec-fbfa-4b4a-bf09-7898b0b1758f"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "nsmet", 
   "\"This system cannot be solved with the methods available to Solve.\"", 2,
    9, 4, 24204268999215068940, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8075824391855774`*^9, 3.8075826062327175`*^9},
 CellLabel->
  "Durante la evaluaci\[OAcute]n de \
In[9]:=",ExpressionUUID->"8e1f2b5c-8edf-41c9-ab28-16a7d331b5a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["2", "3"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "Z"}], ")"}], 
      RowBox[{"3", "/", "2"}]]}], "\[Equal]", 
    RowBox[{
     SqrtBox[
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["z", "2"]}]], "-", 
     RowBox[{"ArcSec", "[", "z", "]"}]}]}], ",", "z", ",", 
   RowBox[{"InverseFunctions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.807582647159565*^9, 3.807582647543355*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"9fae977a-d82c-432c-bfce-e1a4553c95ab"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "nsmet", 
   "\"This system cannot be solved with the methods available to Solve.\"", 2,
    10, 5, 24204268999215068940, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8075826498328476`*^9},
 CellLabel->
  "Durante la evaluaci\[OAcute]n de \
In[10]:=",ExpressionUUID->"d9434bd6-0848-4fb7-9221-4321e2ffefbc"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["2", "3"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "Z"}], ")"}], 
      RowBox[{"3", "/", "2"}]]}], "\[Equal]", 
    RowBox[{
     SqrtBox[
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["z", "2"]}]], "-", 
     RowBox[{"ArcSec", "[", "z", "]"}]}]}], ",", "z", ",", 
   RowBox[{"InverseFunctions", "\[Rule]", "True"}]}], "]"}]], "Output",
 CellChangeTimes->{3.8075826498448153`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"44261f6a-a327-44cc-82b3-19e1d5c926e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", "/", "3"}], ")"}], "*", 
     RowBox[{"\[Zeta]", "^", 
      RowBox[{"(", 
       RowBox[{"3", "/", "2"}], ")"}]}]}], "==", 
    RowBox[{
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{"z", "^", "2"}], "-", "1"}], "]"}], "-", 
     RowBox[{"ArcCos", "[", 
      RowBox[{"1", "/", "z"}], "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Zeta]", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.807583970671734*^9, 3.8075839834685135`*^9}, {
  3.807584191557515*^9, 3.807584265629488*^9}, {3.807584314006081*^9, 
  3.8075843698739376`*^9}, {3.8075844062006874`*^9, 3.80758442651171*^9}, {
  3.8075844592703876`*^9, 3.807584533705348*^9}, {3.807584567315843*^9, 
  3.8075845848116026`*^9}, {3.8075846171414566`*^9, 3.807584651133354*^9}, {
  3.80758473939268*^9, 3.8075847396505003`*^9}, {3.807584905955092*^9, 
  3.8075849100443254`*^9}, {3.8075849550246677`*^9, 3.8075850316690884`*^9}, {
  3.80758506885293*^9, 3.8075850928791475`*^9}, {3.807585187994769*^9, 
  3.807585192311743*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"4eb5a32f-cdf9-4915-92e0-448c29569335"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
+X2CV9lobp1GkWEzzYcpb4f+B7FBC/E=
    "], {{}, {}, 
     TagBox[
      TooltipBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
         69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 
         86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 
         102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112}]},
       RowBox[{
         FractionBox[
          RowBox[{"2", " ", 
            SuperscriptBox[
             TagBox["\[Zeta]", HoldForm], 
             RowBox[{"3", "/", "2"}]]}], "3"], "\[Equal]", 
         RowBox[{
           RowBox[{"-", 
             RowBox[{"ArcCos", "[", 
               FractionBox["1", 
                TagBox["z", HoldForm]], "]"}]}], "+", 
           SqrtBox[
            RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               TagBox["z", HoldForm], "2"]}]]}]}]],
      Annotation[#, 
       Rational[2, 3] 
        HoldForm[$CellContext`\[Zeta]]^Rational[3, 2] == -
         ArcCos[HoldForm[$CellContext`z]^(-1)] + (-1 + 
          HoldForm[$CellContext`z]^2)^Rational[1, 2], "Tooltip"]& ]}], {}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{
     FormBox[
      TagBox[
       TagBox["\[Zeta]", HoldForm], HoldForm], TraditionalForm], None}, {
     FormBox[
      TagBox[
       TagBox["z", HoldForm], HoldForm], TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 10}, {0, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8075850161996155`*^9, 3.807585032164801*^9}, {
   3.807585074657911*^9, 3.807585093383799*^9}, 3.8075851929143195`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"765ad1f1-f794-4ad3-858e-7c73577e458c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"BesselJZero", "[", 
       RowBox[{"n", ",", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}]}], ",", "0", ",", 
      RowBox[{"1", "/", "10"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"%", ",", "20"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Fit", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", "^", "0"}], ",", 
     RowBox[{"n", "^", "1"}], ",", 
     RowBox[{"n", "^", "2"}], ",", 
     RowBox[{"n", "^", "3"}], ",", 
     RowBox[{"n", "^", "4"}], ",", 
     RowBox[{"n", "^", "5"}], ",", 
     RowBox[{"n", "^", "6"}]}], "}"}], ",", "n"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8075858827291155`*^9, 3.8075858936245394`*^9}, {
  3.8076362529950237`*^9, 3.807636365801108*^9}, {3.807636547758221*^9, 
  3.807636548789403*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"6c98640c-cac7-4631-b215-5ae55afb46e9"],

Cell[BoxData[
 RowBox[{"2.40482555769577276862280214354243953602`18.744727494896694", "+", 
  RowBox[{
  "1.54280567704566295357456632895973833698`18.744727494896694", " ", "n"}], 
  "-", 
  RowBox[{"0.17757573537688192404214794437013463237`18.744727494896694", " ", 
   SuperscriptBox["n", "2"]}], "+", 
  RowBox[{"0.07814930561248873745131980364348359985`18.744727494896694", " ", 
   SuperscriptBox["n", "3"]}], "-", 
  RowBox[{"0.15205419167239498676252599836278088969`18.74472749489669", " ", 
   SuperscriptBox["n", "4"]}], "-", 
  RowBox[{"0.14932477774880044548677226476360016674`18.744727494896694", " ", 
   SuperscriptBox["n", "5"]}], "-", 
  RowBox[{"0.23211569007285930630710982252531779252`18.744727494896694", " ", 
   SuperscriptBox["n", "6"]}]}]], "Output",
 CellChangeTimes->{{3.8076362944598665`*^9, 3.807636309347315*^9}, 
   3.8076363662880306`*^9, 3.8076365492262993`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"401ed09e-3549-4318-82e3-bdf4de097a90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"BesselJZero", "[", 
       RowBox[{"n", ",", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", 
      RowBox[{"22", "/", "10"}], ",", 
      RowBox[{"1", "/", "10"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"%", ",", "20"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Fit", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", "^", "0"}], ",", 
     RowBox[{"n", "^", "1"}], ",", 
     RowBox[{"n", "^", "2"}], ",", 
     RowBox[{"n", "^", "3"}], ",", 
     RowBox[{"n", "^", "4"}], ",", 
     RowBox[{"n", "^", "5"}], ",", 
     RowBox[{"n", "^", "6"}]}], "}"}], ",", "n"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8076469465208955`*^9, 3.8076469513392076`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"ee4a57d2-9bf6-4902-9e55-3052dc2b0570"],

Cell[BoxData[
 RowBox[{"2.40483599152546342938739522334903932073`18.744727494896694", "+", 
  RowBox[{
  "1.54218796007374965824917754113444916201`18.744727494896694", " ", "n"}], 
  "-", 
  RowBox[{"0.16966871259062003738656929407765234261`18.744727494896694", " ", 
   SuperscriptBox["n", "2"]}], "+", 
  RowBox[{"0.07823208802010560737787277254213456373`18.744727494896694", " ", 
   SuperscriptBox["n", "3"]}], "-", 
  RowBox[{"0.03064091477201269534042227390797653259`18.744727494896694", " ", 
   SuperscriptBox["n", "4"]}], "+", 
  RowBox[{"0.00759003563741012166712080933988578973`18.744727494896694", " ", 
   SuperscriptBox["n", "5"]}], "-", 
  RowBox[{"0.00083423790460103978843907213894780156`18.744727494896694", " ", 
   SuperscriptBox["n", "6"]}]}]], "Output",
 CellChangeTimes->{3.8076469552492075`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"1de1d3ae-c946-4b6d-a4d2-85841c86ed5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"BesselYZero", "[", 
       RowBox[{"n", ",", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", 
      RowBox[{"22", "/", "10"}], ",", 
      RowBox[{"1", "/", "10"}]}], "}"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"%", ",", "20"}], "]"}], ";"}], "\n", 
 RowBox[{"Fit", "[", 
  RowBox[{"%", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", "^", "0"}], ",", 
     RowBox[{"n", "^", "1"}], ",", 
     RowBox[{"n", "^", "2"}], ",", 
     RowBox[{"n", "^", "3"}], ",", 
     RowBox[{"n", "^", "4"}], ",", 
     RowBox[{"n", "^", "5"}], ",", 
     RowBox[{"n", "^", "6"}]}], "}"}], ",", "n"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8076589863261147`*^9, 3.8076589925326347`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"a271b41a-ce20-4bd1-8904-f3b8c14e0a21"],

Cell[BoxData[
 RowBox[{"0.89362115190200490375263709133011914823`18.744727494896694", "+", 
  RowBox[{
  "1.44378463108852440092217666707407069586`18.744727494896694", " ", "n"}], 
  "-", 
  RowBox[{"0.24168166876519637611129671826676800243`18.744727494896694", " ", 
   SuperscriptBox["n", "2"]}], "+", 
  RowBox[{"0.15911026811536220676433993773718424198`18.744727494896694", " ", 
   SuperscriptBox["n", "3"]}], "-", 
  RowBox[{"0.07648778548652579930931708918736535159`18.744727494896694", " ", 
   SuperscriptBox["n", "4"]}], "+", 
  RowBox[{"0.02129188704905315826644650281826027519`18.744727494896694", " ", 
   SuperscriptBox["n", "5"]}], "-", 
  RowBox[{"0.00250959092356522624962521729413400006`18.744727494896694", " ", 
   SuperscriptBox["n", "6"]}]}]], "Output",
 CellChangeTimes->{3.807659151729499*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"2f08defd-e59c-4302-bc2d-613a7d60049e"]
}, Open  ]]
},
WindowSize->{958, 988},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
TaggingRules->{"TryRealOnly" -> False},
FrontEndVersion->"12.1 para Microsoft Windows (64-bit) (June 19, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2e240471-6873-401f-94f9-3c8eec6257d6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 254, 3, 44, "WolframAlphaLong",ExpressionUUID->"1d3b39a3-7dc9-4333-9f23-5712f94236f2"],
Cell[837, 27, 290219, 5200, 1417, "Print",ExpressionUUID->"ff739bdc-2775-4e60-8725-712046cde569"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291093, 5232, 257, 5, 45, "Input",ExpressionUUID->"afb477db-1719-4f53-87e8-b242b90d357e"],
Cell[291353, 5239, 253, 7, 54, "Output",ExpressionUUID->"c2eeedc4-9f26-4a05-ad3c-d3c0139cb6f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291643, 5251, 196, 2, 44, "WolframAlphaLong",ExpressionUUID->"d120deb8-e748-48f6-8c47-f806ecd1e1dd"],
Cell[291842, 5255, 92367, 1803, 1059, "Print",ExpressionUUID->"1ecad4fb-2389-4fd3-aa4b-1e9aee6e5b6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384246, 7063, 199, 2, 44, "WolframAlphaLong",ExpressionUUID->"857111d1-f7f9-4dee-8df0-cfa35b6211d9"],
Cell[384448, 7067, 137211, 2695, 1439, "Print",ExpressionUUID->"2a1257e2-987a-4bf6-8d5b-606c85c5d176"]
}, Open  ]],
Cell[CellGroupData[{
Cell[521696, 9767, 781, 21, 45, "Input",ExpressionUUID->"c083f3ec-fbfa-4b4a-bf09-7898b0b1758f"],
Cell[522480, 9790, 395, 9, 21, "Message",ExpressionUUID->"8e1f2b5c-8edf-41c9-ab28-16a7d331b5a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[522912, 9804, 623, 18, 61, "Input",ExpressionUUID->"9fae977a-d82c-432c-bfce-e1a4553c95ab"],
Cell[523538, 9824, 373, 9, 21, "Message",ExpressionUUID->"d9434bd6-0848-4fb7-9221-4321e2ffefbc"],
Cell[523914, 9835, 602, 18, 49, "Output",ExpressionUUID->"44261f6a-a327-44cc-82b3-19e1d5c926e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524553, 9858, 1341, 30, 45, "Input",ExpressionUUID->"4eb5a32f-cdf9-4915-92e0-448c29569335"],
Cell[525897, 9890, 4903, 105, 378, "Output",ExpressionUUID->"765ad1f1-f794-4ad3-858e-7c73577e458c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[530837, 10000, 1121, 32, 119, "Input",ExpressionUUID->"6c98640c-cac7-4631-b215-5ae55afb46e9"],
Cell[531961, 10034, 972, 17, 52, "Output",ExpressionUUID->"401ed09e-3549-4318-82e3-bdf4de097a90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[532970, 10056, 972, 28, 119, "Input",ExpressionUUID->"ee4a57d2-9bf6-4902-9e55-3052dc2b0570"],
Cell[533945, 10086, 898, 16, 52, "Output",ExpressionUUID->"1de1d3ae-c946-4b6d-a4d2-85841c86ed5b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534880, 10107, 935, 27, 119, "Input",ExpressionUUID->"a271b41a-ce20-4bd1-8904-f3b8c14e0a21"],
Cell[535818, 10136, 896, 16, 52, "Output",ExpressionUUID->"2f08defd-e59c-4302-bc2d-613a7d60049e"]
}, Open  ]]
}
]
*)

